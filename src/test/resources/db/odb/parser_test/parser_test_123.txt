; MacSHAPA Open Database( setf macshapa-db  '(     ( HEADER>      (         ( VERSION> 1 )         ( NAME> "parser_test.db" )        ( DEBUG-LEVEL> 2 )         ( MAX-ERRORS> 20 )        ( MAX-WARNINGS> 50 )      )    )    (      USER>      (        (          PREDICATE-DEFINITIONS>          (            (               |GOAL|               (                 ( VARIABLE-LENGTH> FALSE )                ( FORMAL-ARG-LIST> ( |<TEMPERATURE>| |<VOLUME>| |<FLOWRATE>| ) )               )            )            (               |COMMAND|              (                ( VARIABLE-LENGTH> FALSE )                ( FORMAL-ARG-LIST> ( |<SPEAKER>| |<TO>| |<MITIGATION>| ) )               )            )            (               |ACKNOWL|              (                ( VARIABLE-LENGTH> FALSE )                ( FORMAL-ARG-LIST> ( |<SPEAKER>| |<TO>| |<MITIGATION>| ) )               )            )            (               |ANNOUNCE|              (                ( VARIABLE-LENGTH> FALSE )                ( FORMAL-ARG-LIST> ( |<SPEAKER>| |<MITIGATION>| ) )               )            )            (               |OBSERVE|              (                ( VARIABLE-LENGTH> FALSE )                ( FORMAL-ARG-LIST> ( |<SPEAKER>| |<MITIGATION>| ) )               )            )            (               |REASON|              (                ( VARIABLE-LENGTH> FALSE )                ( FORMAL-ARG-LIST> ( |<SPEAKER>| |<MITIGATION>| ) )               )            )            (               |PREDICT|              (                ( VARIABLE-LENGTH> FALSE )                ( FORMAL-ARG-LIST> ( |<SPEAKER>| |<MITIGATION>| ) )               )            )          )        )        (          SPREADSHEET-VARIABLE-DECLARATIONS>          (            (              |verbal|              (                ( TYPE>            <<TEXT>> )                ( VARIABLE-LENGTH> FALSE  )                ( FORMAL-ARG-LIST> ( |<ord>| |<onset>| |<offset>| |<val>| ) )                ( COLUMN-WIDTH>    183 )              )            )            (              |state.var|              (                ( TYPE>            <<MATRIX>> )                ( VARIABLE-LENGTH> FALSE  )                ( FORMAL-ARG-LIST> ( |<ord>| |<onset>| |<offset>| |<PARAM>| |<SUBSYS>| |<VAL>| ) )                ( COLUMN-WIDTH>    183 )              )            )            (              |sys.var|              (                ( TYPE>            <<MATRIX>> )                ( VARIABLE-LENGTH> FALSE  )                ( FORMAL-ARG-LIST> ( |<ord>| |<onset>| |<offset>| |<PARAM>| |<SUBSYS>| |<VAL>| ) )                ( COLUMN-WIDTH>    200 )              )            )            (              |speechcode|              (                ( TYPE>            <<PREDICATE>> )                ( VARIABLE-LENGTH> FALSE  )                ( FORMAL-ARG-LIST> ( |<ord>| |<onset>| |<offset>| |<val>| ) )                ( COLUMN-WIDTH>    200 )              )            )          )        )        (          SPREADSHEET-VARIABLE-DEFINITIONS>          (            (              |verbal|              (                (                  CELLS>                  (                    ( ( ONSET>   60 ) ( OFFSET>  360 ) ( |<val>| "Expter:  Please try to increase temperature, increase volume and increase flowrate." ) )                     ( ( ONSET>  420 ) ( OFFSET>  540 ) ( |<val>| "Sam:  Tom, you can do the hydraulic side and I'll do the heat side." ) )                     ( ( ONSET>  600 ) ( OFFSET>  660 ) ( |<val>| "Tom:  If you like." ) )                     ( ( ONSET>  660 ) ( OFFSET>  780 ) ( |<val>| "Sam:  I'll set heater up to 8 for now." ) )                     ( ( ONSET>  780 ) ( OFFSET> 1260 ) ( |<val>| "Tom:  OK.  First to increase flowrate I'm going to open the input valve a bit more and open up the output valve." ) )                     ( ( ONSET> 1260 ) ( OFFSET> 1440 ) ( |<val>| "Sam:  OK, volume is starting to increase..." ) )                     ( ( ONSET> 1440 ) ( OFFSET> 1560 ) ( |<val>| "Sam:  ...and so is flow rate." ) )                     ( ( ONSET> 1680 ) ( OFFSET> 1800 ) ( |<val>| "Sam:  Nothing happening so far on temperature..." ) )                     ( ( ONSET> 1800 ) ( OFFSET> 1860 ) ( |<val>| "Sam:  ...so I'll send it up to 9." ) )                     ( ( ONSET> 1920 ) ( OFFSET> 2040 ) ( |<val>| "Sam:  You haven't done anything to the mixer value and volume is going up pretty fast." ) )                     ( ( ONSET> 2160 ) ( OFFSET> 2220 ) ( |<val>| "Tom:  Oh sorry...I always forget that!" ) )                     ( ( ONSET> 2280 ) ( OFFSET> 2400 ) ( |<val>| "Tom:  I wonder why the flow rate is decreasing?" ) )                     ( ( ONSET> 2460 ) ( OFFSET> 2520 ) ( |<val>| "Tom:  I increased input and output so flow rate should increase." ) )                     ( ( ONSET> 2580 ) ( OFFSET> 2700 ) ( |<val>| "Tom:  Oh!  It's because I forgot to open the mixer valve." ) )                     ( ( ONSET> 2700 ) ( OFFSET> 2880 ) ( |<val>| "Tom:  So flow rate should increase in a minute or two." ) )                     ( ( ONSET> 2760 ) ( OFFSET> 2820 ) ( |<val>| "Sam:  There the temperature goes!" ) )                     ( ( ONSET> 2880 ) ( OFFSET> 3000 ) ( |<val>| "Tom:  ...and that's what it's doing." ) )                     ( ( ONSET> 3000 ) ( OFFSET> 3120 ) ( |<val>| "Tom:  Oh hell!  It's going down again." ) )                     ( ( ONSET> 3120 ) ( OFFSET> 3180 ) ( |<val>| "Tom:  So I'll open the output a bit." ) )                     ( ( ONSET> 3300 ) ( OFFSET> 3480 ) ( |<val>| "Sam:  Why don't you let it settle rather than keeping on playing with it?" ) )                     ( ( ONSET> 3540 ) ( OFFSET> 3840 ) ( |<val>| "Tom:  Oh well...I don't think I play with it too much." ) )                     ( ( ONSET> 3840 ) ( OFFSET> 3960 ) ( |<val>| "Sam:  You do, you know." ) )                     ( ( ONSET> 4200 ) ( OFFSET> 4320 ) ( |<val>| "Sam:  Temperature's still rising." ) )                     ( ( ONSET> 4500 ) ( OFFSET> 4680 ) ( |<val>| "Tom:  You've confused me about the flowrate now, Sam!" ) )                   )                )              )            )            (              |state.var|              (                (                  CELLS>                  (                    ( ( ONSET>    0 ) ( OFFSET>    0 ) ( |<PARAM>| |M| ) ( |<SUBSYS>| |L| ) ( |<VAL>| 5 ) )                     ( ( ONSET>    0 ) ( OFFSET>    0 ) ( |<PARAM>| |I| ) ( |<SUBSYS>| |A| ) ( |<VAL>| 5 ) )                     ( ( ONSET>    0 ) ( OFFSET>    0 ) ( |<PARAM>| |O| ) ( |<SUBSYS>| |A| ) ( |<VAL>| 1 ) )                     ( ( ONSET>    0 ) ( OFFSET>    0 ) ( |<PARAM>| |H| ) ( |<SUBSYS>| |A| ) ( |<VAL>| 5 ) )                     ( ( ONSET>  660 ) ( OFFSET>  720 ) ( |<PARAM>| |H| ) ( |<SUBSYS>| |A| ) ( |<VAL>| 9 ) )                     ( ( ONSET> 1140 ) ( OFFSET> 1260 ) ( |<PARAM>| |O| ) ( |<SUBSYS>| |A| ) ( |<VAL>| 8 ) )                     ( ( ONSET> 1260 ) ( OFFSET> 1380 ) ( |<PARAM>| |I| ) ( |<SUBSYS>| |A| ) ( |<VAL>| 8 ) )                     ( ( ONSET> 1800 ) ( OFFSET> 1920 ) ( |<PARAM>| |H| ) ( |<SUBSYS>| |A| ) ( |<VAL>| 9 ) )                     ( ( ONSET> 2460 ) ( OFFSET> 2580 ) ( |<PARAM>| |M| ) ( |<SUBSYS>| |L| ) ( |<VAL>| 8 ) )                   )                )                ( VOCAB> ( ) )              )            )            (              |sys.var|              (                (                  CELLS>                  (                    ( ( ONSET>    0 ) ( OFFSET> 1320 ) ( |<PARAM>| |V|  ) ( |<SUBSYS>| |A| ) ( |<VAL>| 21 ) )                     ( ( ONSET>    0 ) ( OFFSET> 1440 ) ( |<PARAM>| |FR| ) ( |<SUBSYS>| |A| ) ( |<VAL>|  5 ) )                     ( ( ONSET>    0 ) ( OFFSET> 2760 ) ( |<PARAM>| |T|  ) ( |<SUBSYS>| |A| ) ( |<VAL>|  3 ) )                     ( ( ONSET> 1320 ) ( OFFSET> 1500 ) ( |<PARAM>| |V|  ) ( |<SUBSYS>| |A| ) ( |<VAL>| 22 ) )                     ( ( ONSET> 1440 ) ( OFFSET> 1680 ) ( |<PARAM>| |FR| ) ( |<SUBSYS>| |A| ) ( |<VAL>|  6 ) )                     ( ( ONSET> 1500 ) ( OFFSET> 1860 ) ( |<PARAM>| |V|  ) ( |<SUBSYS>| |A| ) ( |<VAL>| 23 ) )                     ( ( ONSET> 1680 ) ( OFFSET> 1920 ) ( |<PARAM>| |FR| ) ( |<SUBSYS>| |A| ) ( |<VAL>|  5 ) )                     ( ( ONSET> 1860 ) ( OFFSET> 1980 ) ( |<PARAM>| |V|  ) ( |<SUBSYS>| |A| ) ( |<VAL>| 24 ) )                     ( ( ONSET> 1920 ) ( OFFSET> 2760 ) ( |<PARAM>| |FR| ) ( |<SUBSYS>| |A| ) ( |<VAL>|  4 ) )                     ( ( ONSET> 1980 ) ( OFFSET> 2040 ) ( |<PARAM>| |V|  ) ( |<SUBSYS>| |A| ) ( |<VAL>| 25 ) )                     ( ( ONSET> 2040 ) ( OFFSET> 2580 ) ( |<PARAM>| |V|  ) ( |<SUBSYS>| |A| ) ( |<VAL>| 26 ) )                     ( ( ONSET> 2580 ) ( OFFSET> 4800 ) ( |<PARAM>| |V|  ) ( |<SUBSYS>| |A| ) ( |<VAL>| 25 ) )                     ( ( ONSET> 2760 ) ( OFFSET> 2820 ) ( |<PARAM>| |FR| ) ( |<SUBSYS>| |A| ) ( |<VAL>|  5 ) )                     ( ( ONSET> 2760 ) ( OFFSET> 2880 ) ( |<PARAM>| |T|  ) ( |<SUBSYS>| |A| ) ( |<VAL>| 24 ) )                     ( ( ONSET> 2820 ) ( OFFSET> 2880 ) ( |<PARAM>| |FR| ) ( |<SUBSYS>| |A| ) ( |<VAL>|  6 ) )                     ( ( ONSET> 2880 ) ( OFFSET> 3300 ) ( |<PARAM>| |FR| ) ( |<SUBSYS>| |A| ) ( |<VAL>|  5 ) )                     ( ( ONSET> 2880 ) ( OFFSET> 4200 ) ( |<PARAM>| |T|  ) ( |<SUBSYS>| |A| ) ( |<VAL>| 25 ) )                     ( ( ONSET> 3300 ) ( OFFSET> 3780 ) ( |<PARAM>| |FR| ) ( |<SUBSYS>| |A| ) ( |<VAL>|  4 ) )                     ( ( ONSET> 3780 ) ( OFFSET> 4800 ) ( |<PARAM>| |FR| ) ( |<SUBSYS>| |A| ) ( |<VAL>|  3 ) )                     ( ( ONSET> 4200 ) ( OFFSET> 4800 ) ( |<PARAM>| |T|  ) ( |<SUBSYS>| |A| ) ( |<VAL>| 26 ) )                   )                )                ( VOCAB> ( ) )              )            )            ( |speechcode|              (                (                  CELLS>                  (                    ( ( ONSET>   60 ) ( OFFSET>  360 ) ( |<val>| ( |GOAL|     |+|   |+|   |+| ) ) )                     ( ( ONSET>  420 ) ( OFFSET>  540 ) ( |<val>| ( |COMMAND|  |Sam| |Tom| +1  ) ) )                    ( ( ONSET>  600 ) ( OFFSET>  660 ) ( |<val>| ( |ACKNOWL|  |Tom| |Sam| -1  ) ) )                     ( ( ONSET>  660 ) ( OFFSET>  780 ) ( |<val>| ( |ANNOUNCE| |Sam| 0         ) ) )                     ( ( ONSET>  780 ) ( OFFSET> 1260 ) ( |<val>| ( |ANNOUNCE| |Tom| 0         ) ) )                     ( ( ONSET> 1260 ) ( OFFSET> 1440 ) ( |<val>| ( |OBSERVE|  |Sam| 0         ) ) )                     ( ( ONSET> 1440 ) ( OFFSET> 1560 ) ( |<val>| ( |OBSERVE|  |Sam| 0         ) ) )                     ( ( ONSET> 1680 ) ( OFFSET> 1800 ) ( |<val>| ( |OBSERVE|  |Sam| 0         ) ) )                     ( ( ONSET> 1800 ) ( OFFSET> 1860 ) ( |<val>| ( |ANNOUNCE| |Sam| 0         ) ) )                     ( ( ONSET> 1920 ) ( OFFSET> 2040 ) ( |<val>| ( |COMMAND|  |Sam| |Tom| -1  ) ) )                     ( ( ONSET> 2160 ) ( OFFSET> 2220 ) ( |<val>| ( |ACKNOWL|  |Tom| |Sam| -1  ) ) )                     ( ( ONSET> 2280 ) ( OFFSET> 2400 ) ( |<val>| ( |OBSERVE|  |Tom| -1        ) ) )                     ( ( ONSET> 2460 ) ( OFFSET> 2520 ) ( |<val>| ( |REASON|   |Tom| 0         ) ) )                     ( ( ONSET> 2580 ) ( OFFSET> 2700 ) ( |<val>| ( |REASON|   |Tom| 0         ) ) )                     ( ( ONSET> 2700 ) ( OFFSET> 2880 ) ( |<val>| ( |PREDICT|  |Tom| 0         ) ) )                     ( ( ONSET> 2760 ) ( OFFSET> 2820 ) ( |<val>| ( |OBSERVE|  |Sam| 0         ) ) )                     ( ( ONSET> 2880 ) ( OFFSET> 3000 ) ( |<val>| ( |OBSERVE|  |Tom| 0         ) ) )                     ( ( ONSET> 3000 ) ( OFFSET> 3120 ) ( |<val>| ( |OBSERVE|  |Tom| +1        ) ) )                     ( ( ONSET> 3120 ) ( OFFSET> 3180 ) ( |<val>| ( |ANNOUNCE| |Tom| 0         ) ) )                     ( ( ONSET> 3300 ) ( OFFSET> 3480 ) ( |<val>| ( |COMMAND|  |Sam| |Tom| +1  ) ) )                     ( ( ONSET> 3540 ) ( OFFSET> 3840 ) ( |<val>| ( |ACKNOWL|  |Tom| |Sam| -1  ) ) )                     ( ( ONSET> 3840 ) ( OFFSET> 3960 ) ( |<val>| ( |ACKNOWL|  |Sam| |Tom| +1  ) ) )                     ( ( ONSET> 4200 ) ( OFFSET> 4320 ) ( |<val>| ( |OBSERVE|  |Sam| 0         ) ) )                     ( ( ONSET> 4500 ) ( OFFSET> 4680 ) ( |<val>| ( |ACKNOWL|  |Tom| |Sam| +1  ) ) )                   )                )                ( VOCAB> ( |GOAL| |COMMAND| |ACKNOWL| |ANNOUNCE| |OBSERVE| |REASON| |PREDICT| ) )              )            )          )        )      )    )    (      QUERY>      (        (           |query|           (             |or|             (               |and|               ( |sys.var| |?ordsys| |?onsys| |?offsys| |V| |<SUBSYS>| |?v| )               ( |state.var| |?ordstate| |?onstate| |?offstate| |H| |<SUBSYS>| |<VAL>| )               ( |le| ( |minus| |?onstate| ( TIME> 600 ) ) |?onsys| )               ( |ge| ( |minus| |?onstate| ( TIME> 300 ) ) |?onsys| )             )             (               |and|               ( |sys.var| |?ordsys| |?onsys| |?offsys| |V| |<SUBSYS>| |?v| )               ( |state.var| |?ordstate| |?onstate| |?offstate| |H| |<SUBSYS>| |<VAL>| )               ( |ge| ( |minus| |?onstate| ( TIME> 300 ) ) |?offsys| )               ( |le| ( |minus| |?onstate| ( TIME> 600 ) ) |?offsys| )             )             (               |and|               ( |sys.var| |?ordsys| |?onsys| |?offsys| |V| |<SUBSYS>| |?v| )               ( |state.var| |?ordstate| |?onstate| |?offstate| |H| |<SUBSYS>| |<VAL>| )               ( |ge| ( |minus| |?onstate| ( TIME> 300 ) ) |?onsys| )               ( |le| ( |minus| |?onstate| ( TIME> 600) ) |?offsys| )             )           )           ( |print| |?ordstate| |?ordsys| |?v| )         )         (           |query|           (             |and|             ( |sys.var| |?ordsys| |?onsys| |?offsys| |V| |<SUBSYS>| |?a| )             ( |ge| |?a| 21 )             ( |state.var| |?ordstate| |?onstate| |<offset>| |?b| |?c| |?d| )             ( |ge| |?onstate| |?onsys| )             ( |le| |?onstate| |?offsys| )           )           ( |print| |?ordsys| |?a| |?ordstate| |?b| |?c| |?d| )         )         (           |query|           (             |or|             (               |and|               ( |sys.var| |?ordsys| |?onsys| |?offsys| |V| |<SUBSYS>| |?a| )               ( |ge| |?a| 23 )               ( |state.var| |?ordstate| |?onstate| |?offstate| |?b| |?c| |?d| )               ( |ge| |?onstate| |?onsys| )               ( |le| |?onstate| |?offsys| )               |<arg6>|             )             (               |and|               ( |sys.var| |?ordsys| |?onsys| |?offsys| |V| |<SUBSYS>| |?a| )               ( |ge| |?a| 23 )               ( |state.var| |?ordstate| |?onstate| |?offstate| |?b| |?c| |?d| )               ( |le| |?offstate| |?offsys| )               ( |ge| |?offstate| |?onsys| )             )           )           ( |print| |?ordsys| |?a| |?ordstate| |?b| |?c| |?d| )         )         (           |query|           (             |and|             ( |sys.var| |?ordsys| |?onsys| |?offsys| |V| |<SUBSYS>| |?v| )             ( |state.var| |?ordstate| |?onstate| |?offstate| |H| |<SUBSYS>| |<VAL>| )             ( |le| ( |minus| |?onstate| ( TIME> 300 ) ) |?offsys| )             ( |ge| ( |minus| |?onstate| ( TIME> 300 ) ) |?onsys| )             |<arg5>|           )           ( |print| |?ordsys| |?ordstate| |?v| )         )         (           |query|           (             |or|             ( |speechcode| |<ord>| |<onset>| |<offset>| ( |COMMAND| |?sp| |<TO>| -1 ) )             ( |speechcode| |<ord>| |<onset>| |<offset>| ( |ACKNOWL| |?sp| |<TO>| -1 ) )             ( |speechcode| |<ord>| |<onset>| |<offset>| ( |ANNOUNCE| |?sp| -1 ) )             ( |speechcode| |<ord>| |<onset>| |<offset>| ( |OBSERVE| |?sp| -1 ) )             ( |speechcode| |<ord>| |<onset>| |<offset>| ( |REASON| |?sp| -1 ) )             ( |speechcode| |<ord>| |<onset>| |<offset>| ( |PREDICT| |?sp| -1 ) )           )           ( |print| |?sp| )         )         (           |query|           (             |and|             ( |speechcode| |?eord| |?eon| |?eoff| |?b| )             ( |sys.var| |?sord| |?son| |?soff| |V| |<SUBSYS>| |?c| )             ( |le| |?c| |23| )             ( |ge| |?eon| |?son| )             ( |le| |?eon| |?soff| )           )           ( |print| |?eord| |?b| |?c| )         )         (           |query|           (             |or|             (               |and|               ( |sys.var| |?ordv| |?onv| |?offv| |V| |<SUBSYS>| |?val| )               ( |state.var| |?ordh| |?onh| |?offh| |H| |<SUBSYS>| |<VAL>| )               ( |ge| |?onv| ( |minus| |?onh| ( TIME> 600 ) ) )               ( |le| |?onv| ( |minus| |?onh| ( TIME> 300 ) ) )             )             |<arg2>|             |<arg3>|             |<arg4>|           )           ( |print| |?ordh| |?ordv| |?val| )         )         (           |query|           (             |or|             (               |and|               ( |sys.var| |?ordv| |?onv| |?offv| |V| |<SUBSYS>| |?val| )               ( |state.var| |?ordh| |?onh| |?offh| |H| |<SUBSYS>| |<VAL>| )               ( |ge| |?onv| ( |minus| |?onh| ( TIME> 600 ) ) )               ( |le| |?onv| ( |minus| |?onh| ( TIME> 300 ) ) )             )             (               |and|               ( |sys.var| |?ordv| |?onv| |?offv| |V| |<SUBSYS>| |<VAL>| )               ( |state.var| |?ordh| |?onh| |?offh| |H| |<SUBSYS>| |?val| )               ( |le| |?offv| ( |minus| |?onh| ( TIME> 300 ) ) )               ( |ge| |?offv| ( |minus| |?onh| ( TIME> 600 ) ) )             )           )           ( |print| |?ordh| |?ordv| |?val| )         )         (           |query|           ( |sys.var| |?ord1| |?on1| |?off1| |V| |<SUBSYS>| |<VAL>| )           ( |print| |?ord1| |?on1| |?off1| )         )         (           |query|           (             |and|             ( |sys.var| |?ordv| |?onv| |?offv| |V| |<SUBSYS>| |?v| )             ( |state.var| |?ordh| |?onh| |?offh| |H| |<SUBSYS>| |<VAL>| )             ( |le| |?onv| ( |plus| |?onh| ( TIME> 300 ) ) )             ( |ge| |?offv| ( |plus| |?onh| ( TIME> 300 ) ) )           )           ( |print| |?ordv| |?ordh| |?v| )         )         (           |query|           (             |and|             ( |speechcode| |?orda| |?ona| |?offa| ( |ANNOUNCE| |<SPEAKER>| 0 ) )             ( |speechcode| |?ordo| |?ono| |?offo| ( |OBSERVE| |<SPEAKER>| |<MITIGATION>| ) )             ( |gt| |?ono| |?offa| )             (               |not|               (                 |and|                 ( |speechcode| |<ord>| |?ono2| |?offo2| ( |OBSERVE| |<SPEAKER>| |<MITIGATION>| ) )                 ( |gt| |?ono2| |?offa| )                 ( |lt| |?ono2| |?ono| )               )             )           )           ( |print| |?orda| |?ordo| )         )         (           |query|           (             |or|             ( |speechcode| |?o1| |<onset>| |<offset>| |?x| )             ( |speechcode| |?o2| |<onset>| |<offset>| |?y| )           )           ( |print| |?x| )         )       )    )    ( SYSTEM>      (         (          ; at present, the OpenSHAPA ODB file reader simply discards alignments.          ; I am leaving this data in the test, as it does no harm, however          ; should we ever start to support loading MacSHAPA alignements into          ; into OpenSHAPA, this data will break the test (and give us a leg          ; up on testing same).          ALIGNMENTS>          (            (              |&*=[^^an-alignment|              (                ( TYPE>            <<MATRIX>> )                ( VARIABLE-LENGTH> FALSE  )                ( FORMAL-ARG-LIST> ( |<ord>| |<onset>| |<offset>| |<arg1>| |<arg2>| |<status>| ) )                ( COLUMN-WIDTH>    200 )                (                  CELLS>                  (                    ( ( ONSET>  0 ) ( OFFSET>    0 ) ( |<arg1>| |speechcode| ) ( |<arg2>| |speechcode| ) ( |<status>| 1 ) )                      ( ( ONSET> 30 ) ( OFFSET>    0 ) ( |<arg1>| ":pred" )      ( |<arg2>| ":pred" )      ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>|  1 )           ( |<arg2>|  1 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>|  2 )           ( |<arg2>|  2 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>|  3 )           ( |<arg2>|  3 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>|  4 )           ( |<arg2>|  4 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>|  5 )           ( |<arg2>|  5 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>|  6 )           ( |<arg2>|  6 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>|  7 )           ( |<arg2>|  7 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>|  8 )           ( |<arg2>|  8 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>|  9 )           ( |<arg2>|  9 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 10 )           ( |<arg2>| 10 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 11 )           ( |<arg2>| 11 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 12 )           ( |<arg2>| 12 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 13 )           ( |<arg2>| 13 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 14 )           ( |<arg2>| 14 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 15 )           ( |<arg2>| 15 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 16 )           ( |<arg2>| 16 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 17 )           ( |<arg2>| 17 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 18 )           ( |<arg2>| 18 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 19 )           ( |<arg2>| 19 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 20 )           ( |<arg2>| 20 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 21 )           ( |<arg2>| 21 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 22 )           ( |<arg2>| 22 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 23 )           ( |<arg2>| 23 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 24 )           ( |<arg2>| 24 )           ( |<status>| 0 ) )                   )                )              )            )            (              |&*=[^^another-alignment|              (                ( TYPE>            <<MATRIX>> )                ( VARIABLE-LENGTH> FALSE  )                ( FORMAL-ARG-LIST> ( |<ord>| |<onset>| |<offset>| |<arg1>| |<arg2>| |<status>| ) )                ( COLUMN-WIDTH>    200 )                (                  CELLS>                  (                    ( ( ONSET>  0 ) ( OFFSET>    0 ) ( |<arg1>| |state.var| ) ( |<arg2>| |state.var| ) ( |<status>| 1 ) )                     ( ( ONSET> 30 ) ( OFFSET>    0 ) ( |<arg1>| ":<PARAM>" )  ( |<arg2>| ":<PARAM>" )  ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 1 )           ( |<arg2>| 1 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 2 )           ( |<arg2>| 2 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 3 )           ( |<arg2>| 3 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 4 )           ( |<arg2>| 4 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 5 )           ( |<arg2>| 5 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 6 )           ( |<arg2>| 6 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 7 )           ( |<arg2>| 7 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 8 )           ( |<arg2>| 8 )           ( |<status>| 0 ) )                     ( ( ONSET> 60 ) ( OFFSET>    0 ) ( |<arg1>| 9 )           ( |<arg2>| 9 )           ( |<status>| 0 ) )                   )                )              )            )          )        )        (          SHAPA-PANE-VARS>          (            |verbal|            |speechcode|            |state.var|            |sys.var|          )        )        (          ; at present, the OpenSHAPA ODB file reader simply discards groups.          ; I am leaving this data in the test, as it does no harm, however          ; should we ever start to support loading MacSHAPA groups into          ; into OpenSHAPA, this data will break the test (and give us a leg          ; up on testing same).          GROUPS>          (            ( ( |verbal|  1 ) ( |speechcode|  1 ) )            ( ( |verbal|  2 ) ( |speechcode|  2 ) )            ( ( |verbal|  3 ) ( |speechcode|  3 ) )            ( ( |verbal|  4 ) ( |speechcode|  4 ) )            ( ( |verbal|  5 ) ( |speechcode|  5 ) )            ( ( |verbal|  6 ) ( |speechcode|  6 ) )            ( ( |verbal|  7 ) ( |speechcode|  7 ) )            ( ( |verbal|  8 ) ( |speechcode|  8 ) )            ( ( |verbal|  9 ) ( |speechcode|  9 ) )            ( ( |verbal| 10 ) ( |speechcode| 10 ) )            ( ( |verbal| 11 ) ( |speechcode| 11 ) )            ( ( |verbal| 12 ) ( |speechcode| 12 ) )            ( ( |verbal| 13 ) ( |speechcode| 13 ) )            ( ( |verbal| 14 ) ( |speechcode| 14 ) )            ( ( |verbal| 15 ) ( |speechcode| 15 ) )            ( ( |verbal| 16 ) ( |speechcode| 16 ) )            ( ( |verbal| 17 ) ( |speechcode| 17 ) )            ( ( |verbal| 18 ) ( |speechcode| 18 ) )            ( ( |verbal| 19 ) ( |speechcode| 19 ) )            ( ( |verbal| 20 ) ( |speechcode| 20 ) )            ( ( |verbal| 21 ) ( |speechcode| 21 ) )            ( ( |verbal| 22 ) ( |speechcode| 22 ) )            ( ( |verbal| 23 ) ( |speechcode| 24 ) ( |speechcode| 23 ) ( |sys.var| 20 ) ( |verbal| 24 ) )          )        )        (          ; at present, the OpenSHAPA ODB file reader simply discards import          ; format data.          ;          ; I am leaving this data in the test, as it does no harm.  However          ; should we ever start to support loading MacSHAPA groups into          ; into OpenSHAPA, this data will break the test (and give us a leg          ; up on testing same).          IMPORT-FORMATS-LIST>          (            (              "untitled"              (                (                  IMPORT-PRODUCTION-LIST>                  (                    ( ( NAME> "record" ) ( PATTERN> "" ) ( HARD-PREC> 0 ) ( IS-SHOWN> TRUE ) ( IS-TRACED> FALSE ) ( INSERT-ACTIONS> ( ( ( VAR> "" ) ( ONSET> "" ) ( OFFSET> "" ) ( VAL> "" ) ) ) ) )                  )                )              )            )            (              "general.fmt"              (                (                  IMPORT-PRODUCTION-LIST>                  (                    ( ( NAME> "file"       ) ( PATTERN> "records"                                       ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return 0;" ) ) ) ) )                    ( ( NAME> "records"    ) ( PATTERN> "record"                                        ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return 0;" ) ) ) ) )                    ( ( NAME> "records"    ) ( PATTERN> "records record"                                ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return 0;" ) ) ) ) )                    ( ( NAME> "record"     ) ( PATTERN> ""                                              ) ( HARD-PREC> 0 ) ( IS-SHOWN> TRUE  ) ( IS-TRACED> FALSE ) ( INSERT-ACTIONS> ( ( ( VAR> "" ) ( ONSET> "" ) ( OFFSET> "" ) ( VAL> "" ) ) ) ) )                    ( ( NAME> "tab"        ) ( PATTERN> "\"\\t\""                                       ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return 0;" ) ) ) ) )                    ( ( NAME> "space"      ) ( PATTERN> "\" \""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return 0;" ) ) ) ) )                    ( ( NAME> "comma"      ) ( PATTERN> "\",\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return 0;" ) ) ) ) )                    ( ( NAME> "return"     ) ( PATTERN> "\"\\n\""                                       ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return 0;" ) ) ) ) )                    ( ( NAME> "hmst60"     ) ( PATTERN> "DIGITS \":\" DIGITS \":\" DIGITS \":\" DIGITS" ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "ticks=$1 * (60 * 60 * 60) + $3 * (60 * 60) + $5 * 60 + $7;return ticks;" ) ) ) ) )                    ( ( NAME> "hmsf30"     ) ( PATTERN> "DIGITS \":\" DIGITS \":\" DIGITS \":\" DIGITS" ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "ticks=$1 * (60 * 60 * 60) + $3 * (60 * 60) + $5 * 60 + $7 * 2;return ticks;" ) ) ) ) )                    ( ( NAME> "hmsf25"     ) ( PATTERN> "DIGITS \":\" DIGITS \":\" DIGITS \":\" DIGITS" ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "ticks=$1 * (60 * 60 * 60) + $3 * (60 * 60) + $5 * 60 + $7 * 2.4;return ticks;" ) ) ) ) )                    ( ( NAME> "hms"        ) ( PATTERN> "DIGITS \":\" DIGITS \":\" DIGITS"              ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "ticks=$1 * (60 * 60 * 60) + $3 * (60 * 60) + $5 * 60;return ticks;" ) ) ) ) )                    ( ( NAME> "seconds"    ) ( PATTERN> "DIGITS"                                        ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "ticks=$1 * 60;return ticks;" ) ) ) ) )                    ( ( NAME> "frame30"    ) ( PATTERN> "DIGITS"                                        ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) (  PROGRAM-ACTIONS> ( ( ( TEXT> "ticks=$1 * 2;return ticks;" ) ) ) ) )                    ( ( NAME> "frame25"    ) ( PATTERN> "DIGITS"                                        ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "ticks=$1 * 2.4;return ticks;" ) ) ) ) )                    ( ( NAME> "ticks"      ) ( PATTERN> "DIGITS"                                        ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) (  PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "text"       ) ( PATTERN> "text textChar"                                 ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "textString=concat($1,$2);return textString;" ) ) ) ) )                    ( ( NAME> "text"       ) ( PATTERN> "textChar"                                      ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "textChar"   ) ( PATTERN> "ALPHA"                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1" ) ) ) ) )                    ( ( NAME> "textChar"   ) ( PATTERN> "DIGITS"                                        ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "textChar"   ) ( PATTERN> "punc"                                          ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "textChar"   ) ( PATTERN> "textPunc"                                      ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "nominal"    ) ( PATTERN> "nominal nomChar"                               ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "nomString=concat($1,$2);return nomString;" ) ) ) ) )                    ( ( NAME> "nominal"    ) ( PATTERN> "nomChar"                                       ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "nomChar"    ) ( PATTERN> "ALPHA"                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "nomChar"    ) ( PATTERN> "DIGITS"                                        ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "nomChar"    ) ( PATTERN> "punc"                                          ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "nomChar"    ) ( PATTERN> "nomPunc"                                       ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "NOTE"       ) ( PATTERN> "\"\\t\""                                       ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "n=\"  If you want to include tabs in the definition of text or      \";n=\"  nominal,  then change left hand side of this rule from      \";n=\"            NOTE         to     textChar or nomChar                  \";return $1;" ) ) ) ) )                    ( ( NAME> "NOTE"       ) ( PATTERN> "\",\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "n=\"  If you want to include commas in the definition of           \";n=\"  nominals or arguments, then change left hand side          \";n=\"  of this rule from                                                                \";n=\"            NOTE         to     nomChar or argChar                   \";return \"_\";" ) ) ) ) )                    ( ( NAME> "argument"   ) ( PATTERN> "argument argChar"                              ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "argString=concat($1,$2);return argString;" ) ) ) ) )                    ( ( NAME> "argument"   ) ( PATTERN> "argChar"                                       ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "argChar"    ) ( PATTERN> "ALPHA"                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "argChar"    ) ( PATTERN> "DIGITS"                                        ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "argChar"    ) ( PATTERN> "punc"                                          ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "argChar"    ) ( PATTERN> "argPunc"                                       ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "integer"    ) ( PATTERN> "posInt"                                        ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "integer"    ) ( PATTERN> "negInt"                                        ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "posInt"     ) ( PATTERN> "DIGITS"                                        ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "negInt"     ) ( PATTERN> "\"-\" DIGITS"                                  ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "i=concat($1,$2);return i;" ) ) ) ) )                    ( ( NAME> "float"      ) ( PATTERN> "posInt"                                        ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "f=concat($1,\".0\");return f;" ) ) ) ) )                    ( ( NAME> "float"      ) ( PATTERN> "DIGITS \".\""                                  ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "f=concat($1,$2,\"0\");return f;" ) ) ) ) )                    ( ( NAME> "float"      ) ( PATTERN> "DIGITS \".\" DIGITS"                           ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "f=concat($1,$2,$3);return f;" ) ) ) ) )                    ( ( NAME> "float"      ) ( PATTERN> "\".\" DIGITS"                                  ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "f=concat(\"0\",$1,$2);return f;" ) ) ) ) )                    ( ( NAME> "float"      ) ( PATTERN> "\"-\" float"                                   ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "f=concat($1,$2);return f;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\" \""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"~\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"`\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"!\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"@\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"#\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"$\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"%\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"^\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"&\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"*\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"_\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"-\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"+\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"=\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"{\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"}\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"[\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"]\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"\\\\\""                                      ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "NOTE=\"  Two backslashes is the only way to get the             \";NOTE=\"  backslash character itself.                                        \";return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\";\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"'\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\".\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"?\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "punc"       ) ( PATTERN> "\"/\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "textPunc"   ) ( PATTERN> "\"(\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "textPunc"   ) ( PATTERN> "\")\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "textPunc"   ) ( PATTERN> "\"|\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "textPunc"   ) ( PATTERN> "\":\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "textPunc"   ) ( PATTERN> "\",\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "textPunc"   ) ( PATTERN> "\"\\\"\""                                      ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "textPunc"   ) ( PATTERN> "\"<\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "textPunc"   ) ( PATTERN> "\">\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "nomPunc"    ) ( PATTERN> "\"(\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return \"_\";" ) ) ) ) )                    ( ( NAME> "nomPunc"    ) ( PATTERN> "\")\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return \"_\";" ) ) ) ) )                    ( ( NAME> "nomPunc"    ) ( PATTERN> "\"_\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return \"_\";" ) ) ) ) )                    ( ( NAME> "nomPunc"    ) ( PATTERN> "\"|\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "nomPunc"    ) ( PATTERN> "\":\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "nomPunc"    ) ( PATTERN> "\"\\\"\""                                      ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "nomPunc"    ) ( PATTERN> "\"<\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "nomPunc"    ) ( PATTERN> "\">\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return $1;" ) ) ) ) )                    ( ( NAME> "argPunc"    ) ( PATTERN> "\"(\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return \"_\";" ) ) ) ) )                    ( ( NAME> "argPunc"    ) ( PATTERN> "\")\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return \"_\";" ) ) ) ) )                    ( ( NAME> "argPunc"    ) ( PATTERN> "\"\\\"\""                                      ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return \"_\";" ) ) ) ) )                    ( ( NAME> "argPunc"    ) ( PATTERN> "\":\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return \"_\";" ) ) ) ) )                    ( ( NAME> "argPunc"    ) ( PATTERN> "\"|\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return \"_\";" ) ) ) ) )                    ( ( NAME> "argPunc"    ) ( PATTERN> "\"<\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return \"_\";" ) ) ) ) )                    ( ( NAME> "argPunc"    ) ( PATTERN> "\">\""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return \"_\";" ) ) ) ) )                    ( ( NAME> "ws"         ) ( PATTERN> "ws whitespace"                                 ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return 0;" ) ) ) ) )                    ( ( NAME> "ws"         ) ( PATTERN> "whitespace"                                    ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return 0;" ) ) ) ) )                    ( ( NAME> "whitespace" ) ( PATTERN> "\" \""                                         ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return 0;" ) ) ) ) )                    ( ( NAME> "whitespace" ) ( PATTERN> "\"\\t\""                                       ) ( HARD-PREC> 0 ) ( IS-SHOWN> FALSE ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "return 0;" ) ) ) ) )                    ( ( NAME> ""           ) ( PATTERN> ""                                              ) ( HARD-PREC> 0 ) ( IS-SHOWN> TRUE  ) ( IS-TRACED> FALSE ) ( PROGRAM-ACTIONS> ( ( ( TEXT> "" ) ) ) ) )                  )                )              )            )          )        )      )    )  ))