***MacShapa Version***0 0 a***Predicates***14 0 1  44 ###QueryVar###(<ord>,<onset>,<offset>,<val>)  0 0  39 GOAL(<TEMPERATURE>,<VOLUME>,<FLOWRATE>)  0 0  36 COMMAND(<SPEAKER>,<TO>,<MITIGATION>)  0 0  36 ACKNOWL(<SPEAKER>,<TO>,<MITIGATION>)  0 0  32 ANNOUNCE(<SPEAKER>,<MITIGATION>)  0 0  31 OBSERVE(<SPEAKER>,<MITIGATION>)  0 0  30 REASON(<SPEAKER>,<MITIGATION>)  0 0  31 PREDICT(<SPEAKER>,<MITIGATION>)  0 1  36 verbal(<ord>,<onset>,<offset>,<val>)  0 1  56 state.var(<ord>,<onset>,<offset>,<PARAM>,<SUBSYS>,<VAL>)  0 1  54 sys.var(<ord>,<onset>,<offset>,<PARAM>,<SUBSYS>,<VAL>)  0 1  40 speechcode(<ord>,<onset>,<offset>,<val>)  0 1  65 &*=[^^an-alignment(<ord>,<onset>,<offset>,<arg1>,<arg2>,<status>)  0 1  70 &*=[^^another-alignment(<ord>,<onset>,<offset>,<arg1>,<arg2>,<status>) ***Variables***712	predicateID	0	1	200 44 ###QueryVar###(<ord>,<onset>,<offset>,<val>) 0	0	 599 query(or(and(sys.var(?ordsys,?onsys,?offsys,V,<SUBSYS>,?v),state.var(?ordstate,?onstate,?offstate,H,<SUBSYS>,<VAL>),le(minus(?onstate,00:00:10:00),?onsys),ge(minus(?onstate,00:00:05:00),?onsys)),and(sys.var(?ordsys,?onsys,?offsys,V,<SUBSYS>,?v),state.var(?ordstate,?onstate,?offstate,H,<SUBSYS>,<VAL>),ge(minus(?onstate,00:00:05:00),?offsys),le(minus(?onstate,00:00:10:00),?offsys)),and(sys.var(?ordsys,?onsys,?offsys,V,<SUBSYS>,?v),state.var(?ordstate,?onstate,?offstate,H,<SUBSYS>,<VAL>),ge(minus(?onstate,00:00:05:00),?onsys),le(minus(?onstate,00:00:10:00),?offsys))),print(?ordstate,?ordsys,?v)) 0	0	 193 query(and(sys.var(?ordsys,?onsys,?offsys,V,<SUBSYS>,?a),ge(?a,21),state.var(?ordstate,?onstate,<offset>,?b,?c,?d),ge(?onstate,?onsys),le(?onstate,?offsys)),print(?ordsys,?a,?ordstate,?b,?c,?d)) 0	0	 358 query(or(and(sys.var(?ordsys,?onsys,?offsys,V,<SUBSYS>,?a),ge(?a,23),state.var(?ordstate,?onstate,?offstate,?b,?c,?d),ge(?onstate,?onsys),le(?onstate,?offsys),<arg6>),and(sys.var(?ordsys,?onsys,?offsys,V,<SUBSYS>,?a),ge(?a,23),state.var(?ordstate,?onstate,?offstate,?b,?c,?d),le(?offstate,?offsys),ge(?offstate,?onsys))),print(?ordsys,?a,?ordstate,?b,?c,?d)) 0	0	 228 query(and(sys.var(?ordsys,?onsys,?offsys,V,<SUBSYS>,?v),state.var(?ordstate,?onstate,?offstate,H,<SUBSYS>,<VAL>),le(minus(?onstate,00:00:05:00),?offsys),ge(minus(?onstate,00:00:05:00),?onsys),<arg5>),print(?ordsys,?ordstate,?v)) 0	0	 337 query(or(speechcode(<ord>,<onset>,<offset>,COMMAND(?sp,<TO>,-1)),speechcode(<ord>,<onset>,<offset>,ACKNOWL(?sp,<TO>,-1)),speechcode(<ord>,<onset>,<offset>,ANNOUNCE(?sp,-1)),speechcode(<ord>,<onset>,<offset>,OBSERVE(?sp,-1)),speechcode(<ord>,<onset>,<offset>,REASON(?sp,-1)),speechcode(<ord>,<onset>,<offset>,PREDICT(?sp,-1))),print(?sp)) 0	0	 141 query(and(speechcode(?eord,?eon,?eoff,?b),sys.var(?sord,?son,?soff,V,<SUBSYS>,?c),le(?c,23),ge(?eon,?son),le(?eon,?soff)),print(?eord,?b,?c)) 0	0	 213 query(or(and(sys.var(?ordv,?onv,?offv,V,<SUBSYS>,?val),state.var(?ordh,?onh,?offh,H,<SUBSYS>,<VAL>),ge(?onv,minus(?onh,00:00:10:00)),le(?onv,minus(?onh,00:00:05:00))),<arg2>,<arg3>,<arg4>),print(?ordh,?ordv,?val)) 0	0	 352 query(or(and(sys.var(?ordv,?onv,?offv,V,<SUBSYS>,?val),state.var(?ordh,?onh,?offh,H,<SUBSYS>,<VAL>),ge(?onv,minus(?onh,00:00:10:00)),le(?onv,minus(?onh,00:00:05:00))),and(sys.var(?ordv,?onv,?offv,V,<SUBSYS>,<VAL>),state.var(?ordh,?onh,?offh,H,<SUBSYS>,?val),le(?offv,minus(?onh,00:00:05:00)),ge(?offv,minus(?onh,00:00:10:00)))),print(?ordh,?ordv,?val)) 0	0	 73 query(sys.var(?ord1,?on1,?off1,V,<SUBSYS>,<VAL>),print(?ord1,?on1,?off1)) 0	0	 183 query(and(sys.var(?ordv,?onv,?offv,V,<SUBSYS>,?v),state.var(?ordh,?onh,?offh,H,<SUBSYS>,<VAL>),le(?onv,plus(?onh,00:00:05:00)),ge(?offv,plus(?onh,00:00:05:00))),print(?ordv,?ordh,?v)) 0	0	 261 query(and(speechcode(?orda,?ona,?offa,ANNOUNCE(<SPEAKER>,0)),speechcode(?ordo,?ono,?offo,OBSERVE(<SPEAKER>,<MITIGATION>)),gt(?ono,?offa),not(and(speechcode(<ord>,?ono2,?offo2,OBSERVE(<SPEAKER>,<MITIGATION>)),gt(?ono2,?offa),lt(?ono2,?ono)))),print(?orda,?ordo)) 0	0	 92 query(or(speechcode(?o1,<onset>,<offset>,?x),speechcode(?o2,<onset>,<offset>,?y)),print(?x)) 6 7 COMMAND  7 ACKNOWL  8 ANNOUNCE  7 OBSERVE  6 REASON  7 PREDICT 24	strID	0	0	183 36 verbal(<ord>,<onset>,<offset>,<val>) 60	360	 83 Expter:  Please try to increase temperature, increase volume and increase flowrate. 420	540	 67 Sam:  Tom, you can do the hydraulic side and I'll do the heat side. 600	660	 18 Tom:  If you like. 660	780	 38 Sam:  I'll set heater up to 8 for now. 780	1260	 112 Tom:  OK.  First to increase flowrate I'm going to open the input valve a bit more and open up the output valve. 1260	1440	 43 Sam:  OK, volume is starting to increase... 1440	1560	 29 Sam:  ...and so is flow rate. 1680	1800	 48 Sam:  Nothing happening so far on temperature... 1800	1860	 33 Sam:  ...so I'll send it up to 9. 1920	2040	 86 Sam:  You haven't done anything to the mixer value and volume is going up pretty fast. 2160	2220	 38 Tom:  Oh sorry...I always forget that! 2280	2400	 47 Tom:  I wonder why the flow rate is decreasing? 2460	2520	 64 Tom:  I increased input and output so flow rate should increase. 2580	2700	 57 Tom:  Oh!  It's because I forgot to open the mixer valve. 2700	2880	 54 Tom:  So flow rate should increase in a minute or two. 2760	2820	 33 Sam:  There the temperature goes! 2880	3000	 36 Tom:  ...and that's what it's doing. 3000	3120	 38 Tom:  Oh hell!  It's going down again. 3120	3180	 36 Tom:  So I'll open the output a bit. 3300	3480	 73 Sam:  Why don't you let it settle rather than keeping on playing with it? 3540	3840	 54 Tom:  Oh well...I don't think I play with it too much. 3840	3960	 23 Sam:  You do, you know. 4200	4320	 33 Sam:  Temperature's still rising. 4200	4320	 53 Tom:  You've confused me about the flowrate now, Sam! 09	matrixID	0	0	183 56 state.var(<ord>,<onset>,<offset>,<PARAM>,<SUBSYS>,<VAL>) 0	0	 7 (M,L,5) 0	0	 7 (I,A,5) 0	0	 7 (O,A,1) 0	0	 7 (H,A,5) 660	720	 7 (H,A,9) 1140	1260	 7 (O,A,8) 1260	1380	 7 (I,A,8) 1800	1920	 7 (H,A,9) 2460	2580	 7 (M,L,8) 020	matrixID	0	0	200 54 sys.var(<ord>,<onset>,<offset>,<PARAM>,<SUBSYS>,<VAL>) 0	1320	 8 (V,A,21) 0	1440	 8 (FR,A,5) 0	2760	 7 (T,A,3) 1320	1500	 8 (V,A,22) 1440	1680	 8 (FR,A,6) 1500	1860	 8 (V,A,23) 1680	1920	 8 (FR,A,5) 1860	1980	 8 (V,A,24) 1920	2760	 8 (FR,A,4) 1980	2040	 8 (V,A,25) 2040	2580	 8 (V,A,26) 2580	4800	 8 (V,A,25) 2760	2820	 8 (FR,A,5) 2760	2880	 8 (T,A,24) 2820	2880	 8 (FR,A,6) 2880	3300	 8 (FR,A,5) 2880	4200	 8 (T,A,25) 3300	3780	 8 (FR,A,4) 3780	4800	 8 (FR,A,3) 4200	4320	 8 (T,A,26) 024	predicateID	0	0	200 40 speechcode(<ord>,<onset>,<offset>,<val>) 60	360	 11 GOAL(+,+,+) 420	540	 19 COMMAND(Sam,Tom,+1) 600	660	 19 ACKNOWL(Tom,Sam,-1) 660	780	 15 ANNOUNCE(Sam,0) 780	1260	 15 ANNOUNCE(Tom,0) 1260	1440	 14 OBSERVE(Sam,0) 1440	1560	 14 OBSERVE(Sam,0) 1680	1800	 14 OBSERVE(Sam,0) 1800	1860	 15 ANNOUNCE(Sam,0) 1920	2040	 19 COMMAND(Sam,Tom,-1) 2160	2220	 19 ACKNOWL(Tom,Sam,-1) 2280	2400	 15 OBSERVE(Tom,-1) 2460	2520	 13 REASON(Tom,0) 2580	2700	 13 REASON(Tom,0) 2700	2880	 14 PREDICT(Tom,0) 2760	2820	 14 OBSERVE(Sam,0) 2880	3000	 14 OBSERVE(Tom,0) 3000	3120	 15 OBSERVE(Tom,+1) 3120	3180	 15 ANNOUNCE(Tom,0) 3300	3480	 19 COMMAND(Sam,Tom,+1) 3540	3840	 19 ACKNOWL(Tom,Sam,-1) 3840	3960	 19 ACKNOWL(Sam,Tom,+1) 4200	4320	 14 OBSERVE(Sam,0) 4200	4320	 19 ACKNOWL(Tom,Sam,+1) 7 4 GOAL  7 COMMAND  7 ACKNOWL  8 ANNOUNCE  7 OBSERVE  6 REASON  7 PREDICT 26	matrixID	0	1	200 65 &*=[^^an-alignment(<ord>,<onset>,<offset>,<arg1>,<arg2>,<status>) 0	0	 25 (speechcode,speechcode,1) 30	0	 19 (":pred",":pred",0) 60	0	 7 (1,1,0) 60	0	 7 (2,2,0) 60	0	 7 (3,3,0) 60	0	 7 (4,4,0) 60	0	 7 (5,5,0) 60	0	 7 (6,6,0) 60	0	 7 (7,7,0) 60	0	 7 (8,8,0) 60	0	 7 (9,9,0) 60	0	 9 (10,10,0) 60	0	 9 (11,11,0) 60	0	 9 (12,12,0) 60	0	 9 (13,13,0) 60	0	 9 (14,14,0) 60	0	 9 (15,15,0) 60	0	 9 (16,16,0) 60	0	 9 (17,17,0) 60	0	 9 (18,18,0) 60	0	 9 (19,19,0) 60	0	 9 (20,20,0) 60	0	 9 (21,21,0) 60	0	 9 (22,22,0) 60	0	 9 (23,23,0) 60	0	 9 (24,24,0) 011	matrixID	0	1	200 70 &*=[^^another-alignment(<ord>,<onset>,<offset>,<arg1>,<arg2>,<status>) 0	0	 23 (state.var,state.var,1) 30	0	 25 (":<PARAM>",":<PARAM>",0) 60	0	 7 (1,1,0) 60	0	 7 (2,2,0) 60	0	 7 (3,3,0) 60	0	 7 (4,4,0) 60	0	 7 (5,5,0) 60	0	 7 (6,6,0) 60	0	 7 (7,7,0) 60	0	 7 (8,8,0) 60	0	 7 (9,9,0) 0***SpreadPane*** 4 6 verbal  10 speechcode  9 state.var  7 sys.var ***Groups***---VarMap---7###QueryVar###verbalstate.varsys.varspeechcode&*=[^^an-alignment&*=[^^another-alignment 1 1 4 1 1 2 4 2 1 3 4 3 1 4 4 4 1 5 4 5 1 6 4 6 1 7 4 7 1 8 4 8 1 9 4 9 1 10 4 10 1 11 4 11 1 12 4 12 1 13 4 13 1 14 4 14 1 15 4 15 1 16 4 16 1 17 4 17 1 18 4 18 1 19 4 19 1 20 4 20 1 21 4 21 1 22 4 22 1 23 1 24 3 20 4 23 4 24%***GrammarFormats***untitledrecord : 0 insert 1 1 0 0   0   0   0  ;%general.fmtfile : records0 program 1 0 0 9 return 0; ;records : record0 program 1 0 0 9 return 0; ;records : records record0 program 1 0 0 9 return 0; ;record : 0 insert 1 1 0 0   0   0   0  ;tab : "\t"0 program 1 0 0 9 return 0; ;space : " "0 program 1 0 0 9 return 0; ;comma : ","0 program 1 0 0 9 return 0; ;return : "\n"0 program 1 0 0 9 return 0; ;hmst60 : DIGITS ":" DIGITS ":" DIGITS ":" DIGITS0 program 1 0 0 72 ticks=$1 * (60 * 60 * 60) + $3 * (60 * 60) + $5 * 60 + $7;return ticks; ;hmsf30 : DIGITS ":" DIGITS ":" DIGITS ":" DIGITS0 program 1 0 0 76 ticks=$1 * (60 * 60 * 60) + $3 * (60 * 60) + $5 * 60 + $7 * 2;return ticks; ;hmsf25 : DIGITS ":" DIGITS ":" DIGITS ":" DIGITS0 program 1 0 0 78 ticks=$1 * (60 * 60 * 60) + $3 * (60 * 60) + $5 * 60 + $7 * 2.4;return ticks; ;hms : DIGITS ":" DIGITS ":" DIGITS0 program 1 0 0 67 ticks=$1 * (60 * 60 * 60) + $3 * (60 * 60) + $5 * 60;return ticks; ;seconds : DIGITS0 program 1 0 0 28 ticks=$1 * 60;return ticks; ;frame30 : DIGITS0 program 1 0 0 27 ticks=$1 * 2;return ticks; ;frame25 : DIGITS0 program 1 0 0 29 ticks=$1 * 2.4;return ticks; ;ticks : DIGITS0 program 1 0 0 10 return $1; ;text : text textChar0 program 1 0 0 44 textString=concat($1,$2);return textString; ;text : textChar0 program 1 0 0 10 return $1; ;textChar : ALPHA0 program 1 0 0 9 return $1 ;textChar : DIGITS0 program 1 0 0 10 return $1; ;textChar : punc0 program 1 0 0 10 return $1; ;textChar : textPunc0 program 1 0 0 10 return $1; ;nominal : nominal nomChar0 program 1 0 0 42 nomString=concat($1,$2);return nomString; ;nominal : nomChar0 program 1 0 0 10 return $1; ;nomChar : ALPHA0 program 1 0 0 10 return $1; ;nomChar : DIGITS0 program 1 0 0 10 return $1; ;nomChar : punc0 program 1 0 0 10 return $1; ;nomChar : nomPunc0 program 1 0 0 10 return $1; ;NOTE : "\t"0 program 1 0 0 224 n="  If you want to include tabs in the definition of text or      ";n="  nominal,  then change left hand side of this rule from      ";n="            NOTE         to     textChar or nomChar                  ";return $1; ;NOTE : ","0 program 1 0 0 312 n="  If you want to include commas in the definition of           ";n="  nominals or arguments, then change left hand side          ";n="  of this rule from                                                                ";n="            NOTE         to     nomChar or argChar                   ";return "_"; ;argument : argument argChar0 program 1 0 0 42 argString=concat($1,$2);return argString; ;argument : argChar0 program 1 0 0 10 return $1; ;argChar : ALPHA0 program 1 0 0 10 return $1; ;argChar : DIGITS0 program 1 0 0 10 return $1; ;argChar : punc0 program 1 0 0 10 return $1; ;argChar : argPunc0 program 1 0 0 10 return $1; ;integer : posInt0 program 1 0 0 10 return $1; ;integer : negInt0 program 1 0 0 10 return $1; ;posInt : DIGITS0 program 1 0 0 10 return $1; ;negInt : "-" DIGITS0 program 1 0 0 26 i=concat($1,$2);return i; ;float : posInt0 program 1 0 0 28 f=concat($1,".0");return f; ;float : DIGITS "."0 program 1 0 0 30 f=concat($1,$2,"0");return f; ;float : DIGITS "." DIGITS0 program 1 0 0 29 f=concat($1,$2,$3);return f; ;float : "." DIGITS0 program 1 0 0 30 f=concat("0",$1,$2);return f; ;float : "-" float0 program 1 0 0 26 f=concat($1,$2);return f; ;punc : " "0 program 1 0 0 10 return $1; ;punc : "~"0 program 1 0 0 10 return $1; ;punc : "`"0 program 1 0 0 10 return $1; ;punc : "!"0 program 1 0 0 10 return $1; ;punc : "@"0 program 1 0 0 10 return $1; ;punc : "#"0 program 1 0 0 10 return $1; ;punc : "$"0 program 1 0 0 10 return $1; ;punc : "%"0 program 1 0 0 10 return $1; ;punc : "^"0 program 1 0 0 10 return $1; ;punc : "&"0 program 1 0 0 10 return $1; ;punc : "*"0 program 1 0 0 10 return $1; ;punc : "_"0 program 1 0 0 10 return $1; ;punc : "-"0 program 1 0 0 10 return $1; ;punc : "+"0 program 1 0 0 10 return $1; ;punc : "="0 program 1 0 0 10 return $1; ;punc : "{"0 program 1 0 0 10 return $1; ;punc : "}"0 program 1 0 0 10 return $1; ;punc : "["0 program 1 0 0 10 return $1; ;punc : "]"0 program 1 0 0 10 return $1; ;punc : "\\"0 program 1 0 0 155 NOTE="  Two backslashes is the only way to get the             ";NOTE="  backslash character itself.                                        ";return $1; ;punc : ";"0 program 1 0 0 10 return $1; ;punc : "'"0 program 1 0 0 10 return $1; ;punc : "."0 program 1 0 0 10 return $1; ;punc : "?"0 program 1 0 0 10 return $1; ;punc : "/"0 program 1 0 0 10 return $1; ;textPunc : "("0 program 1 0 0 10 return $1; ;textPunc : ")"0 program 1 0 0 10 return $1; ;textPunc : "|"0 program 1 0 0 10 return $1; ;textPunc : ":"0 program 1 0 0 10 return $1; ;textPunc : ","0 program 1 0 0 10 return $1; ;textPunc : "\""0 program 1 0 0 10 return $1; ;textPunc : "<"0 program 1 0 0 10 return $1; ;textPunc : ">"0 program 1 0 0 10 return $1; ;nomPunc : "("0 program 1 0 0 11 return "_"; ;nomPunc : ")"0 program 1 0 0 11 return "_"; ;nomPunc : "_"0 program 1 0 0 11 return "_"; ;nomPunc : "|"0 program 1 0 0 10 return $1; ;nomPunc : ":"0 program 1 0 0 10 return $1; ;nomPunc : "\""0 program 1 0 0 10 return $1; ;nomPunc : "<"0 program 1 0 0 10 return $1; ;nomPunc : ">"0 program 1 0 0 10 return $1; ;argPunc : "("0 program 1 0 0 11 return "_"; ;argPunc : ")"0 program 1 0 0 11 return "_"; ;argPunc : "\""0 program 1 0 0 11 return "_"; ;argPunc : ":"0 program 1 0 0 11 return "_"; ;argPunc : "|"0 program 1 0 0 11 return "_"; ;argPunc : "<"0 program 1 0 0 11 return "_"; ;argPunc : ">"0 program 1 0 0 11 return "_"; ;ws : ws whitespace0 program 1 0 0 9 return 0; ;ws : whitespace0 program 1 0 0 9 return 0; ;whitespace : " "0 program 1 0 0 9 return 0; ;whitespace : "\t"0 program 1 0 0 9 return 0; ; : 0 program 1 1 0 0  ;%$