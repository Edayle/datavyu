; MacSHAPA Open Database( setf macshapa-db '(    (      HEADER>      (        ( NAME> "OQL_Mod_Test_10.odb" )        ( VERSION> 1 )        ( DEBUG-LEVEL> 0 )        ( MAX-ERRORS> 1 )        ( MAX-WARNINGS> 1 )      )    )    (      USER>      (        (          PREDICATE-DEFINITIONS>          (            (              |p1|              (                ( VARIABLE-LENGTH> FALSE )                ( FORMAL-ARG-LIST> ( |<arg>| ) )              )            )            (              |comment|              (                ( VARIABLE-LENGTH> FALSE )                ( FORMAL-ARG-LIST> ( |<text>| ) )              )            )          )        )        (          SPREADSHEET-VARIABLE-DECLARATIONS>          (            (              |int_1|              (                ( TYPE> <<INTEGER>> )                ( VARIABLE-LENGTH> FALSE )                ( FORMAL-ARG-LIST> ( |<ord>| |<onset>| |<offset>| |<val>| ) )                ( COLUMN-WIDTH> 200 )              )            )            (              |float_1|              (                ( TYPE> <<FLOAT>> )                ( VARIABLE-LENGTH> FALSE )                ( FORMAL-ARG-LIST> ( |<ord>| |<onset>| |<offset>| |<val>| ) )                ( COLUMN-WIDTH> 200 )              )            )            (              |int_2|              (                ( TYPE> <<INTEGER>> )                ( VARIABLE-LENGTH> FALSE )                ( FORMAL-ARG-LIST> ( |<ord>| |<onset>| |<offset>| |<val>| ) )                ( COLUMN-WIDTH> 200 )              )            )            (              |float_2|              (                ( TYPE> <<FLOAT>> )                ( VARIABLE-LENGTH> FALSE )                ( FORMAL-ARG-LIST> ( |<ord>| |<onset>| |<offset>| |<val>| ) )                ( COLUMN-WIDTH> 200 )              )            )            (              |matrix_1|              (                ( TYPE> <<MATRIX>> )                ( VARIABLE-LENGTH> FALSE )                ( FORMAL-ARG-LIST> ( |<ord>| |<onset>| |<offset>| |<val>| ) )                ( COLUMN-WIDTH> 200 )              )            )            (              |text_1|              (                ( TYPE> <<TEXT>> )                ( VARIABLE-LENGTH> FALSE )                ( FORMAL-ARG-LIST> ( |<ord>| |<onset>| |<offset>| |<val>| ) )                ( COLUMN-WIDTH> 200 )              )            )          )        )        (          SPREADSHEET-VARIABLE-DEFINITIONS>          (            (              |int_1|              (                (                  CELLS>                  (                    ( ( ONSET> 60 ) ( OFFSET> 0 ) ( |<val>| 1 ) )                    ( ( ONSET> 120 ) ( OFFSET> 0 ) ( |<val>| 2 ) )                    ( ( ONSET> 180 ) ( OFFSET> 0 ) ( |<val>| 3 ) )                    ( ( ONSET> 240 ) ( OFFSET> 0 ) ( |<val>| 4 ) )                    ( ( ONSET> 300 ) ( OFFSET> 0 ) ( |<val>| 5 ) )                    ( ( ONSET> 360 ) ( OFFSET> 0 ) ( |<val>| 6 ) )                    ( ( ONSET> 420 ) ( OFFSET> 0 ) ( |<val>| 7 ) )                    ( ( ONSET> 480 ) ( OFFSET> 0 ) ( |<val>| 8 ) )                    ( ( ONSET> 540 ) ( OFFSET> 0 ) ( |<val>| 9 ) )                    ( ( ONSET> 600 ) ( OFFSET> 0 ) ( |<val>| 10 ) )                  )                )              )            )            (              |float_1|              (                (                  CELLS>                  (                    ( ( ONSET> 60 ) ( OFFSET> 0 ) ( |<val>| 10.000000 ) )                    ( ( ONSET> 120 ) ( OFFSET> 0 ) ( |<val>| 20.000000 ) )                    ( ( ONSET> 180 ) ( OFFSET> 0 ) ( |<val>| 30.000000 ) )                    ( ( ONSET> 240 ) ( OFFSET> 0 ) ( |<val>| 40.000000 ) )                    ( ( ONSET> 300 ) ( OFFSET> 0 ) ( |<val>| 50.000000 ) )                    ( ( ONSET> 360 ) ( OFFSET> 0 ) ( |<val>| 60.000000 ) )                    ( ( ONSET> 420 ) ( OFFSET> 0 ) ( |<val>| 70.000000 ) )                    ( ( ONSET> 480 ) ( OFFSET> 0 ) ( |<val>| 80.000000 ) )                    ( ( ONSET> 540 ) ( OFFSET> 0 ) ( |<val>| 90.000000 ) )                    ( ( ONSET> 600 ) ( OFFSET> 0 ) ( |<val>| 100.000000 ) )                  )                )              )            )            (              |int_2|              (                (                  CELLS>                  (                    ( ( ONSET> 60 ) ( OFFSET> 0 ) ( |<val>| 0 ) )                    ( ( ONSET> 120 ) ( OFFSET> 0 ) ( |<val>| -1 ) )                    ( ( ONSET> 180 ) ( OFFSET> 0 ) ( |<val>| -2 ) )                    ( ( ONSET> 240 ) ( OFFSET> 0 ) ( |<val>| -3 ) )                    ( ( ONSET> 300 ) ( OFFSET> 0 ) ( |<val>| -4 ) )                    ( ( ONSET> 360 ) ( OFFSET> 0 ) ( |<val>| -5 ) )                    ( ( ONSET> 420 ) ( OFFSET> 0 ) ( |<val>| -6 ) )                    ( ( ONSET> 480 ) ( OFFSET> 0 ) ( |<val>| -7 ) )                    ( ( ONSET> 540 ) ( OFFSET> 0 ) ( |<val>| -8 ) )                    ( ( ONSET> 600 ) ( OFFSET> 0 ) ( |<val>| -9 ) )                    ( ( ONSET> 660 ) ( OFFSET> 0 ) ( |<val>| -10 ) )                  )                )              )            )            (              |float_2|              (                (                  CELLS>                  (                    ( ( ONSET> 60 ) ( OFFSET> 0 ) ( |<val>| 0.000000 ) )                    ( ( ONSET> 120 ) ( OFFSET> 0 ) ( |<val>| -10.000000 ) )                    ( ( ONSET> 180 ) ( OFFSET> 0 ) ( |<val>| -20.000000 ) )                    ( ( ONSET> 240 ) ( OFFSET> 0 ) ( |<val>| -30.000000 ) )                    ( ( ONSET> 300 ) ( OFFSET> 0 ) ( |<val>| -40.000000 ) )                    ( ( ONSET> 360 ) ( OFFSET> 0 ) ( |<val>| -50.000000 ) )                    ( ( ONSET> 420 ) ( OFFSET> 0 ) ( |<val>| -60.000000 ) )                    ( ( ONSET> 480 ) ( OFFSET> 0 ) ( |<val>| -70.000000 ) )                    ( ( ONSET> 540 ) ( OFFSET> 0 ) ( |<val>| -80.000000 ) )                    ( ( ONSET> 600 ) ( OFFSET> 0 ) ( |<val>| -90.000000 ) )                    ( ( ONSET> 600 ) ( OFFSET> 0 ) ( |<val>| -100.000000 ) )                  )                )              )            )            (              |matrix_1|              (                (                  CELLS>                  (                    ( ( ONSET> 0 ) ( OFFSET> 0 )  ( |<val>| 1 ) )                    ( ( ONSET> 0 ) ( OFFSET> 0 )  ( |<val>| ( TIME> 60 ) ) )                    ( ( ONSET> 0 ) ( OFFSET> 0 )  ( |<val>| 3.141590 ) )                    ( ( ONSET> 0 ) ( OFFSET> 0 )  ( |<val>| |A Nominal| ) )                    ( ( ONSET> 0 ) ( OFFSET> 0 )  ( |<val>| "A quote string" ) )                    ( ( ONSET> 0 ) ( OFFSET> 0 )  ( |<val>| ( |p1| 2 ) ) )                    ( ( ONSET> 0 ) ( OFFSET> 0 )  ( |<val>| ( |p1| ( |p1| |A Nominal| ) ) ) )                    ( ( ONSET> 0 ) ( OFFSET> 0 )  ( |<val>| ( |p1| |<arg>| ) ) )                    ( ( ONSET> 0 ) ( OFFSET> 0 )  ( |<val>| |<val>| ) )                  )                )                ( VOCAB> ( |p1| ) )              )            )            (              |text_1|              (                (                  CELLS>                  (                    ( ( ONSET> 0 ) ( OFFSET> 0 ) ( |<val>| "This is a text string." ) )                    ( ( ONSET> 0 ) ( OFFSET> 0 ) ( |<val>| "" ) )                  )                )              )            )          )        )      )    )    (      QUERY>      (        ( |comment| "In the process of implementing arithmetic operations between times and floats, I found it appropriate to rewrite the code implementing the arithmetic predicates.  Thus the arithmetic prediates must be tested thuroughly." )        ( )        ( |comment| "Start the testing with integer/integer operations:" )        ( |comment| "?val2 should equal negative ?val1 in the following queries." )        ( |query| ( |and| ( |int_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |int_2| |?ord2| |<onset>| |<offset>| |?val2| ) ( |eq| ( |plus| |?val1| |?val2| ) 0 ) ( |eq| ( |minus| ( |times| |?val2| -1 ) |?val1| ) 0 ) ) ( |print| ( |concat| "?val1 = " |?val1| ",  ?val2 = " |?val2| ) ) )        ( |query| ( |and| ( |int_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |int_2| |?ord2| |<onset>| |<offset>| |?val2| ) ( |eq| ( |divide| ( |times| |?val1| |?val2| ) |?val2| ) ( |times| -1 |?val2| ) ) ) ( |print| ( |concat| "?val1 = " |?val1| ",  ?val2 = " |?val2| ) ) )        ( )        ( |comment| "Second, test time/time operations:" )        ( |comment| "?val1 should equal ?val2 in the following queries." )        ( |query| ( |and| ( |int_1| |?ord1| |?val1| |<offset>| |<val>| ) ( |int_2| |?ord2| |?val2| |<offset>| |<val>| ) ( |eq| ( |minus| |?val1| |?val2| ) 0 ) ( |eq| ( |plus| |?val1| ( |times| -1 |?val2| ) ) 0 ) ) ( |print| ( |concat| "?val1 = " |?val1| ",  ?val2 = " |?val2| ) ) )        ( |query| ( |and| ( |int_1| |?ord1| |?val1| |<offset>| |<val>| ) ( |int_2| |?ord2| |?val2| |<offset>| |<val>| ) ( |eq| ( |divide| ( |times| |?val1| |?val2| ) |?val2| ) |?val2| ) ) ( |print| ( |concat| "?val1 = " |?val1| ",  ?val2 = " |?val2| ) ) )        ( )        ( |comment| "Third, test float/float operations:" )        ( |comment| "?val2 should equal negative ?val1 in the following queries." )        ( |query| ( |and| ( |float_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |float_2| |?ord2| |<onset>| |<offset>| |?val2| ) ( |eq| ( |plus| |?val1| |?val2| ) 0 ) ( |eq| ( |minus| ( |times| |?val2| -1 ) |?val1| ) 0 ) ) ( |print| ( |concat| "?val1 = " |?val1| ",  ?val2 = " |?val2| ) ) )        ( |query| ( |and| ( |float_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |float_2| |?ord2| |<onset>| |<offset>| |?val2| ) ( |eq| ( |divide| ( |times| |?val1| |?val2| ) |?val2| ) ( |times| -1 |?val2| ) ) ) ( |print| ( |concat| "?val1 = " |?val1| ",  ?val2 = " |?val2| ) ) )        ( )        ( |comment| "Fourth, test integer/time operations:" )        ( |comment| "In the following queries, either ?val2 should equal 60 times ?val1 or  minus one sixith ?val1." )        ( |query| ( |and| ( |or| ( |and| ( |int_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |int_2| |?ord2| |?val2| |<offset>| |<val>| ) ) ( |and| ( |int_1| |?ord1| |?val1| |<offset>| |<val>| ) ( |int_2| |?ord2| |<onset>| |<offset>| |?val2| ) ) ) ( |or| ( |eq| ( |minus| ( |times| 60 |?val1| ) |?val2| ) 0 ) ( |eq| ( |plus| |?val1| ( |times| |?val2| 60 ) ) 0 ) ) ( |or| ( |eq| ( |divide| ( |times| |?val1| |?val2| ) |?val2| ) ( |divide| |?val2| 60 ) ) ( |eq| ( |divide| ( |times| |?val1| |?val2| ) |?val2| ) ( |times| ( |times| -1 |?val2| ) 60 ) ) ) ) ( |print| ( |concat| "?val1 = " |?val1| ",  ?val2 = " |?val2| ) ) )        ( |query| ( |and| ( |or| ( |and| ( |int_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |int_2| |?ord2| |?val2| |<offset>| |<val>| ) ) ( |and| ( |int_1| |?ord1| |?val1| |<offset>| |<val>| ) ( |int_2| |?ord2| |<onset>| |<offset>| |?val2| ) ) ) ( |or| ( |eq| ( |divide| ( |times| |?val1| |?val2| ) |?val2| ) ( |divide| |?val2| 60 ) ) ( |eq| ( |divide| ( |times| |?val1| |?val2| ) |?val2| ) ( |times| |?val2| -60 ) ) ) ) ( |print| ( |concat| "?val1 = " |?val1| ",  ?val2 = " |?val2| ) ) )        ( )        ( )        ( |comment| "Fifth, test integer/float operations:" )        ( |comment| "In the following queries, either ?val2 should equal minus 10 times ?val1 or  minus one tenth ?val1." )        ( |query| ( |and| ( |or| ( |and| ( |int_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |float_2| |<ord>| |<onset>| |<offset>| |?val2| ) ) ( |and| ( |float_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |int_2| |?ord2| |<onset>| |<offset>| |?val2| ) ) ) ( |or| ( |eq| ( |plus| ( |times| 10 |?val1| ) |?val2| ) 0 ) ( |eq| ( |plus| |?val1| ( |times| |?val2| 10 ) ) 0 ) ) ( |or| ( |eq| ( |divide| ( |times| |?val1| |?val2| ) |?val2| ) ( |divide| |?val2| -10 ) ) ( |eq| ( |divide| ( |times| |?val1| |?val2| ) |?val2| ) ( |times| |?val2| -10 ) ) ) ) ( |print| ( |concat| "?val1 = " |?val1| ",  ?val2 = " |?val2| ) ) )        ( |query| ( |and| ( |or| ( |and| ( |int_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |float_2| |<ord>| |<onset>| |<offset>| |?val2| ) ) ( |and| ( |float_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |int_2| |?ord2| |<onset>| |<offset>| |?val2| ) ) ) ( |or| ( |eq| ( |divide| ( |times| |?val1| |?val2| ) |?val2| ) ( |divide| |?val2| -10 ) ) ( |eq| ( |divide| ( |times| |?val1| |?val2| ) |?val2| ) ( |times| |?val2| -10 ) ) ) ) ( |print| ( |concat| "?val1 = " |?val1| ",  ?val2 = " |?val2| ) ) )        ( )        ( )        ( |comment| "Sixth, test time/float operations:" )        ( |comment| "In the following queries, either ?val2 should equal six times ?val1 or  minus one sixth ?val1." )        ( |query| ( |and| ( |or| ( |and| ( |int_1| |?ord1| |?val1| |<offset>| |<val>| ) ( |float_2| |<ord>| |<onset>| |<offset>| |?val2| ) ) ( |and| ( |float_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |int_2| |?ord2| |?val2| |<offset>| |<val>| ) ) ) ( |or| ( |eq| ( |plus| ( |divide| |?val1| 6 ) |?val2| ) 0 ) ( |eq| ( |plus| |?val1| ( |divide| |?val2| -6 ) ) 0 ) ) ( |or| ( |eq| ( |divide| ( |times| |?val1| |?val2| ) |?val2| ) ( |divide| |?val2| 6 ) ) ( |eq| ( |divide| ( |times| |?val1| |?val2| ) |?val2| ) ( |times| ( |times| -1 |?val2| ) 6 ) ) ) ) ( |print| ( |concat| "?val1 = " |?val1| ",  ?val2 = " |?val2| ) ) )        ( |query| ( |and| ( |or| ( |and| ( |int_1| |?ord1| |?val1| |<offset>| |<val>| ) ( |float_2| |<ord>| |<onset>| |<offset>| |?val2| ) ) ( |and| ( |float_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |int_2| |?ord2| |?val2| |<offset>| |<val>| ) ) ) ( |or| ( |eq| ( |divide| ( |times| |?val1| |?val2| ) |?val2| ) ( |divide| |?val2| 6 ) ) ( |eq| ( |divide| ( |times| |?val1| |?val2| ) |?val2| ) ( |times| |?val2| -6 ) ) ) ) ( |print| ( |concat| "?val1 = " |?val1| ",  ?val2 = " |?val2| ) ) )        ( )        ( )        ( |comment| "Seventh, try to break things by using bogus arguments:" )        ( |query| ( |and| ( |matrix_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |matrix_1| |?ord2| |<onset>| |<offset>| |?val2| ) ) ( |print| ( |concat| "?val1 = " |?val1| ",  ?val2 = " ( |concatq| |?val2| ) ",  plus(?val1,?val2) = " ( |plus| |?val1| |?val2| ) ) ) )        ( |query| ( |and| ( |matrix_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |matrix_1| |?ord2| |<onset>| |<offset>| |?val2| ) ) ( |print| ( |concat| "?val1 = " |?val1| ",  ?val2 = " ( |concatq| |?val2| ) ",  minus(?val1,?val2) = " ( |minus| |?val1| |?val2| ) ) ) )        ( |query| ( |and| ( |matrix_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |matrix_1| |?ord2| |<onset>| |<offset>| |?val2| ) ) ( |print| ( |concat| "?val1 = " |?val1| ",  ?val2 = " ( |concatq| |?val2| ) ",  times(?val1,?val2) = " ( |times| |?val1| |?val2| ) ) ) )        ( |query| ( |and| ( |matrix_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |matrix_1| |?ord2| |<onset>| |<offset>| |?val2| ) ) ( |print| ( |concat| "?val1 = " |?val1| ",  ?val2 = " ( |concatq| |?val2| ) ",  divide(?val1,?val2) = " ( |divide| |?val1| |?val2| ) ) ) )        ( |query| ( |and| ( |matrix_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |plus| |?val1| ( |int_1| |?ord2| |<onset>| |<offset>| |?val2| ) ) ) ( |print| "This query should not generate any matches." ) )        ( |query| ( |and| ( |matrix_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |ne| ( |divide| |?val1| 0 ) 0 ) ) ( |print| "This query should not generate any matches." ) )        ( )        ( )        ( |comment| "Tests for the new assign predicate." )        ( |comment| "First, make sure that the predicate works with correct input:" )        ( |query| ( |and| ( |int_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |int_2| |?ord2| |<onset>| |<offset>| |?val2| ) ( |assign| |?sum| ( |plus| |?val1| |?val2| ) ) ( |eq| |?sum| 0 ) ) ( |print| ( |concat| "?val1 = " |?val1| ",    ?val2 = " |?val2| ",    ?sum = plus(?val1,?val2) = " |?sum| ) ) )        ( |query| ( |and| ( |or| ( |matrix_1| |<ord>| |<onset>| |<offset>| |?val| ) ( |text_1| |<ord>| |<onset>| |<offset>| |?val| ) ) ( |assign| |?assignVal| ( |p1| |?val| ) ) ) ( |print| ( |concat| "?val = " ( |concatq| |?val| ) ",   ?assignVal = " |?assignVal| ) ) )        ( )        ( |comment| "Now, lets try to break it:" )        ( |query| ( |and| ( |int_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |int_2| |?ord2| |<onset>| |<offset>| |?val2| ) ( |assign| |<query-var>| ( |plus| |?val1| |?val2| ) ) ( |eq| |?sum| 0 ) ) ( |print| ( |concat| "?val1 = " |?val1| ",    ?val2 = " |?val2| ",    ?sum = plus(?val1,?val2) = " |?sum| ) ) )        ( |query| ( |and| ( |int_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |int_2| |?ord2| |<onset>| |<offset>| |?val2| ) ( |assign| |?sum| |<val>| ) ( |eq| |?sum| 0 ) ) ( |print| ( |concat| "?val1 = " |?val1| ",    ?val2 = " |?val2| ",    ?sum = plus(?val1,?val2) = " |?sum| ) ) )        ( |query| ( |and| ( |int_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |int_2| |?ord2| |<onset>| |<offset>| |?val2| ) ( |assign| |?ord1| "some random value" ) ( |eq| |?sum| 0 ) ) ( |print| ( |concat| "?val1 = " |?val1| ",    ?val2 = " |?val2| ",    ?sum = plus(?val1,?val2) = " |?sum| ) ) )        ( |query| ( |and| ( |int_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |int_2| |?ord2| |<onset>| |<offset>| |?val2| ) ( |assign| 0 ( |plus| |?val1| |?val2| ) ) ( |eq| |?sum| 0 ) ) ( |print| ( |concat| "?val1 = " |?val1| ",    ?val2 = " |?val2| ",    ?sum = plus(?val1,?val2) = " |?sum| ) ) )        ( |query| ( |and| ( |int_1| |?ord1| |<onset>| |<offset>| |?val1| ) ( |int_2| |?ord2| |<onset>| |<offset>| |?val2| ) ( |assign| |?ord1| ( |int_1| |<ord>| |<onset>| |<offset>| |<val>| ) ) ( |eq| |?sum| 0 ) ) ( |print| ( |concat| "?val1 = " |?val1| ",    ?val2 = " |?val2| ",    ?sum = plus(?val1,?val2) = " |?sum| ) ) )      )    )    (      SYSTEM>      (        (          ALIGNMENTS>          (          )        )        ( SHAPA-PANE-VARS> ( |int_1| |int_2| |float_1| |float_2| |matrix_1| |text_1| ) )        (          GROUPS>          (          )        )        (          IMPORT-FORMATS-LIST>          (          )        )      )    )  ))