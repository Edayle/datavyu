00001  ; MacSHAPA Open Database
00002  ; 
00003  ; The following file contains a smoke test for the open database lexer.
00004  ;
00005  ; While it contains examples of all legal tokens, it is not a legal database
00006  ; file, and thus the parser is guaranteed to choke on it.  On the other hand,
00007  ; if we only apply the lexer to it, this file should not generate any errors
00008  ; or warnings.
00009  
00010  ( setf macshapa-db '( |this is a nominal| |a_pred_name| "a quote string" ))
((code = 1(L_PAREN_TOK)) (aux = 0) (val = 0.0) (str = () (line_number = 10) (line_index = 1))

((code = 10(SETF_TOK)) (aux = 0) (val = 0.0) (str = setf) (line_number = 10) (line_index = 3))

((code = 11(DB_VAR_TOK)) (aux = 0) (val = 0.0) (str = macshapa-db) (line_number = 10) (line_index = 8))

((code = 12(QUOTE_TOK)) (aux = 0) (val = 0.0) (str = ') (line_number = 10) (line_index = 20))

((code = 1(L_PAREN_TOK)) (aux = 0) (val = 0.0) (str = () (line_number = 10) (line_index = 21))

((code = 3(SYMBOL_TOK)) (aux = 6(COLUMN_FLAG|NOMINAL_FLAG)) (val = 0.0) (str = this is a nominal) (line_number = 10) (line_index = 23))

((code = 3(SYMBOL_TOK)) (aux = 7(PRED_FLAG|COLUMN_FLAG|NOMINAL_FLAG)) (val = 0.0) (str = a_pred_name) (line_number = 10) (line_index = 43))

((code = 6(STRING_TOK)) (aux = 224(TEXT_QSTRING_FLAG|QSTRING_FLAG|NONBLANK_FLAG)) (val = 0.0) (str = a quote string) (line_number = 10) (line_index = 57))

((code = 2(R_PAREN_TOK)) (aux = 0) (val = 0.0) (str = )) (line_number = 10) (line_index = 74))

((code = 2(R_PAREN_TOK)) (aux = 0) (val = 0.0) (str = )) (line_number = 10) (line_index = 75))

00011  "this is a text quote string.  It 
00012  contains an embedded new line, and a pair of embedded \"double quotes\""
((code = 6(STRING_TOK)) (aux = 160(TEXT_QSTRING_FLAG|NONBLANK_FLAG)) (val = 0.0) (str = this is a text quote string.  It 
contains an embedded new line, and a pair of embedded "double quotes") (line_number = 11) (line_index = 1))

00013  1 -1 
((code = 4(INT_TOK)) (aux = 0) (val = 1.0) (str = 1) (line_number = 13) (line_index = 1))

((code = 4(INT_TOK)) (aux = 0) (val = -1.0) (str = -1) (line_number = 13) (line_index = 3))

00014  3.14159 -3.14159 .1 1. 
((code = 5(FLOAT_TOK)) (aux = 0) (val = 3.1415900000000003) (str = 3.14159) (line_number = 14) (line_index = 1))

((code = 5(FLOAT_TOK)) (aux = 0) (val = -3.1415900000000003) (str = -3.14159) (line_number = 14) (line_index = 9))

((code = 5(FLOAT_TOK)) (aux = 0) (val = 0.1) (str = .1) (line_number = 14) (line_index = 18))

((code = 5(FLOAT_TOK)) (aux = 0) (val = 1.0) (str = 1.) (line_number = 14) (line_index = 21))

00015  ""
((code = 6(STRING_TOK)) (aux = 96(TEXT_QSTRING_FLAG|QSTRING_FLAG)) (val = 0.0) (str = ) (line_number = 15) (line_index = 1))

00016  TRUE FALSE
((code = 7(BOOL_TOK)) (aux = 1) (val = 0.0) (str = TRUE) (line_number = 16) (line_index = 1))

((code = 7(BOOL_TOK)) (aux = 0) (val = 0.0) (str = FALSE) (line_number = 16) (line_index = 6))

00017  
00018  ;  now a long string to test the string extention function.
00019  "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
00020  0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
00021  0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
00022  0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
00023  0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
00024  0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
00025  0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
00026  0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
00027  0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
00028  0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
((code = 6(STRING_TOK)) (aux = 160(TEXT_QSTRING_FLAG|NONBLANK_FLAG)) (val = 0.0) (str = 0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789) (line_number = 19) (line_index = 1))

00029  
00030  ALIGNMENTS>
((code = 8(ALIST_LABEL_TOK)) (aux = 0(ALIGNMENTS_LABEL)) (val = 0.0) (str = ALIGNMENTS>) (line_number = 30) (line_index = 1))

00031  CELLS>
((code = 8(ALIST_LABEL_TOK)) (aux = 1(CELLS_LABEL)) (val = 0.0) (str = CELLS>) (line_number = 31) (line_index = 1))

00032  COLUMN-WIDTH>
((code = 8(ALIST_LABEL_TOK)) (aux = 2(COLUMN_WIDTH_LABEL)) (val = 0.0) (str = COLUMN-WIDTH>) (line_number = 32) (line_index = 1))

00033  FORMAL-ARG-LIST>
((code = 8(ALIST_LABEL_TOK)) (aux = 4(FORMAL_ARG_LIST_LABEL)) (val = 0.0) (str = FORMAL-ARG-LIST>) (line_number = 33) (line_index = 1))

00034  GROUPS>
((code = 8(ALIST_LABEL_TOK)) (aux = 5(GROUPS_LABEL)) (val = 0.0) (str = GROUPS>) (line_number = 34) (line_index = 1))

00035  HARD-PREC>
((code = 8(ALIST_LABEL_TOK)) (aux = 6(HARD_PREC_LABEL)) (val = 0.0) (str = HARD-PREC>) (line_number = 35) (line_index = 1))

00036  HEADER>
((code = 8(ALIST_LABEL_TOK)) (aux = 7(HEADER_LABEL)) (val = 0.0) (str = HEADER>) (line_number = 36) (line_index = 1))

00037  IMPORT-FORMAT-LISTS>
((code = 8(ALIST_LABEL_TOK)) (aux = 35(UNKNOWN_ALIST_LABEL)) (val = 0.0) (str = IMPORT-FORMAT-LISTS>) (line_number = 37) (line_index = 1))

00038  IMPORT-PRODUCTION-LIST>
((code = 8(ALIST_LABEL_TOK)) (aux = 9(IMPORT_PRODUCTION_LIST_LABEL)) (val = 0.0) (str = IMPORT-PRODUCTION-LIST>) (line_number = 38) (line_index = 1))

00039  INSERT-ACTIONS>
((code = 8(ALIST_LABEL_TOK)) (aux = 10(INSERT_ACTIONS_LABEL)) (val = 0.0) (str = INSERT-ACTIONS>) (line_number = 39) (line_index = 1))

00040  IS-SHOWN>
((code = 8(ALIST_LABEL_TOK)) (aux = 11(IS_SHOWN_LABEL)) (val = 0.0) (str = IS-SHOWN>) (line_number = 40) (line_index = 1))

00041  IS-TRACED>
((code = 8(ALIST_LABEL_TOK)) (aux = 12(IS_TRACED_LABEL)) (val = 0.0) (str = IS-TRACED>) (line_number = 41) (line_index = 1))

00042  NAME>
((code = 8(ALIST_LABEL_TOK)) (aux = 15(NAME_LABEL)) (val = 0.0) (str = NAME>) (line_number = 42) (line_index = 1))

00043  OFFSET>
((code = 8(ALIST_LABEL_TOK)) (aux = 16(OFFSET_LABEL)) (val = 0.0) (str = OFFSET>) (line_number = 43) (line_index = 1))

00044  ONSET>
((code = 8(ALIST_LABEL_TOK)) (aux = 17(ONSET_LABEL)) (val = 0.0) (str = ONSET>) (line_number = 44) (line_index = 1))

00045  PATTERN>
((code = 8(ALIST_LABEL_TOK)) (aux = 18(PATTERN_LABEL)) (val = 0.0) (str = PATTERN>) (line_number = 45) (line_index = 1))

00046  PREDICATE-DEFINITIONS>
((code = 8(ALIST_LABEL_TOK)) (aux = 19(PREDICATE_DEFINITIONS_LABEL)) (val = 0.0) (str = PREDICATE-DEFINITIONS>) (line_number = 46) (line_index = 1))

00047  PROGRAM-ACTIONS>
((code = 8(ALIST_LABEL_TOK)) (aux = 20(PROGRAM_ACTIONS_LABEL)) (val = 0.0) (str = PROGRAM-ACTIONS>) (line_number = 47) (line_index = 1))

00048  QUERY>
((code = 8(ALIST_LABEL_TOK)) (aux = 21(QUERY_LABEL)) (val = 0.0) (str = QUERY>) (line_number = 48) (line_index = 1))

00049  SHAPA-PANE-VARS>
((code = 8(ALIST_LABEL_TOK)) (aux = 22(SHAPA_PANE_VARS_LABEL)) (val = 0.0) (str = SHAPA-PANE-VARS>) (line_number = 49) (line_index = 1))

00050  SPREADSHEET-VARIABLE-DECLARATIONS>
((code = 8(ALIST_LABEL_TOK)) (aux = 23(SPREADSHEET_VARIABLE_DECLARATIONS_LABEL)) (val = 0.0) (str = SPREADSHEET-VARIABLE-DECLARATIONS>) (line_number = 50) (line_index = 1))

00051  SPREADSHEET-VARIABLE-DEFINITIONS>   ;;;; this is and odd comment added for color
((code = 8(ALIST_LABEL_TOK)) (aux = 24(SPREADSHEET_VARIABLE_DEFINITIONS_LABEL)) (val = 0.0) (str = SPREADSHEET-VARIABLE-DEFINITIONS>) (line_number = 51) (line_index = 1))

00052  SYSTEM>
((code = 8(ALIST_LABEL_TOK)) (aux = 25(SYSTEM_LABEL)) (val = 0.0) (str = SYSTEM>) (line_number = 52) (line_index = 1))

00053  TEXT>
((code = 8(ALIST_LABEL_TOK)) (aux = 26(TEXT_LABEL)) (val = 0.0) (str = TEXT>) (line_number = 53) (line_index = 1))

00054  TIME>
((code = 8(ALIST_LABEL_TOK)) (aux = 27(TIME_LABEL)) (val = 0.0) (str = TIME>) (line_number = 54) (line_index = 1))

00055  TYPE>
((code = 8(ALIST_LABEL_TOK)) (aux = 28(TYPE_LABEL)) (val = 0.0) (str = TYPE>) (line_number = 55) (line_index = 1))

00056  USER>
((code = 8(ALIST_LABEL_TOK)) (aux = 29(USER_LABEL)) (val = 0.0) (str = USER>) (line_number = 56) (line_index = 1))

00057  VAL>
((code = 8(ALIST_LABEL_TOK)) (aux = 30(VAL_LABEL)) (val = 0.0) (str = VAL>) (line_number = 57) (line_index = 1))

00058  VAR>
((code = 8(ALIST_LABEL_TOK)) (aux = 31(VAR_LABEL)) (val = 0.0) (str = VAR>) (line_number = 58) (line_index = 1))

00059  VARIABLE-LENGTH>
((code = 8(ALIST_LABEL_TOK)) (aux = 32(VARIABLE_LENGTH_LABEL)) (val = 0.0) (str = VARIABLE-LENGTH>) (line_number = 59) (line_index = 1))

00060  VERSION>
((code = 8(ALIST_LABEL_TOK)) (aux = 33(VERSION_LABEL)) (val = 0.0) (str = VERSION>) (line_number = 60) (line_index = 1))

00061  VOCAB>
((code = 8(ALIST_LABEL_TOK)) (aux = 34(VOCAB_LABEL)) (val = 0.0) (str = VOCAB>) (line_number = 61) (line_index = 1))

00062  NONE-SUCH>
((code = 8(ALIST_LABEL_TOK)) (aux = 35(UNKNOWN_ALIST_LABEL)) (val = 0.0) (str = NONE-SUCH>) (line_number = 62) (line_index = 1))

00063  
00064  <<FLOAT>>
((code = 9(PRIVATE_VAL_TOK)) (aux = 0(FLOAT_PVAL)) (val = 0.0) (str = <<FLOAT>>) (line_number = 64) (line_index = 1))

00065  <<INTEGER>>
((code = 9(PRIVATE_VAL_TOK)) (aux = 1(INTEGER_PVAL)) (val = 0.0) (str = <<INTEGER>>) (line_number = 65) (line_index = 1))

00066  <<MATRIX>>
((code = 9(PRIVATE_VAL_TOK)) (aux = 2(MATRIX_PVAL)) (val = 0.0) (str = <<MATRIX>>) (line_number = 66) (line_index = 1))

00067  <<NOMINAL>>
((code = 9(PRIVATE_VAL_TOK)) (aux = 3(NOMINAL_PVAL)) (val = 0.0) (str = <<NOMINAL>>) (line_number = 67) (line_index = 1))

00068  <<PREDICATE>>
((code = 9(PRIVATE_VAL_TOK)) (aux = 4(PREDICATE_PVAL)) (val = 0.0) (str = <<PREDICATE>>) (line_number = 68) (line_index = 1))

00069  <<TEXT>>
((code = 9(PRIVATE_VAL_TOK)) (aux = 5(TEXT_PVAL)) (val = 0.0) (str = <<TEXT>>) (line_number = 69) (line_index = 1))

00070  <<NONE-SUCH>>
((code = 9(PRIVATE_VAL_TOK)) (aux = 6(UNKNOWN_PRIVATE_VALUE)) (val = 0.0) (str = <<NONE-SUCH>>) (line_number = 70) (line_index = 1))

00071  
00072  
((code = 13(EOF_TOK)) (aux = 0) (val = 0.0) (str = ) (line_number = 72) (line_index = 0))

