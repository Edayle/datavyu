; MacSHAPA Open Database; ; This database starts to get rough with the lexer.  The general idea is to ; generate all the errors and warnings that the lexer is capable of flagging.;; Needless to say, this is not a legal database, and will cause even more; fireworks if fed to the parser instead of just the lexer.;; This file deals only with errors that can be generated with symbol tokens.;; This formal argument contains an illegal escape sequence|<illegal_escape_seq:\i>|; These formal arguments contain a variety of illegal characters|<<to_many_brackets>>| |<spaces are frobidden in formal arguments>||<()", are_all_forbidden_characters>||<this_formal_argument_contains_a_BS_char:(hex_0x08)>|; this formal argument isn't terminated properly|<unterminated_formal_argument|; this formal argument contains a new line|<broken_formal_arg>|; now, on to predicate names, nominals, and column names;; a symbol with an invalid escape sequence:|the following escape sequence is invalid:\*|; a symbol with leading and trailing spaces:|  this symbol has two leading and two trailing spaces  |; symbols with a variety of illegal characters|()<>",are_all_forbidden_characters||this_fsymbol_contains_a_BS_char:(hex_0x08)|; a symbol with an embedded new line|this-symbol-contains-a-new-line|; finally, an unterminated symbol;; True in MacSHAPA but not in OpenSHAPA -- the class used to read the input file ; in MacshapaODBReader (java.io.BufferedReader) strips the new line character ; (be it \r or \n) from each line as it reads it.  That causes us to recognize the; end of file one character later than we used to -- hence we can no longer get ; an unexpected eof error in this context.  Instead we get another symbol contains; a new line error.|this symbol is unterminated and thus ends in an EOF