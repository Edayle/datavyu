/*
 * DataColumn.java
 *
 * Created on December 14, 2006, 7:15 PM
 *
 */

package au.com.nicta.openshapa.db;

import java.util.Vector;

/**
 *
 * @author FGA
 */
public class DataColumn extends Column
{
//  /** No specified data type */
//  public final static int DATATYPE_NONE       = FormalArgument.DATATYPE_NONE;
//  /** Integer data type */
//  public final static int DATATYPE_INTEGER    = FormalArgument.DATATYPE_INTEGER;
//  /** Float data type */
//  public final static int DATATYPE_FLOAT      = FormalArgument.DATATYPE_FLOAT;
//  /** String data type */
//  public final static int DATATYPE_STRING     = FormalArgument.DATATYPE_STRING;
//  /** Nominal data type */
//  public final static int DATATYPE_NOMINAL    = FormalArgument.DATATYPE_NOMINAL;
//  /** Timestamp data type */
//  public final static int DATATYPE_TIMESTAMP  = FormalArgument.DATATYPE_TIMESTAMP;
//  /** Predicate data type */
//  public final static int DATATYPE_PREDICATE  = FormalArgument.DATATYPE_PREDICATE;
//  /** Matrix data type */
//  public final static int DATATYPE_MATRIX     = FormalArgument.DATATYPE_MATRIX;

  /**
   * The type of cells in this column
   */
  int type = 0; // DATATYPE_NONE;

  /**
   * The cells in this column
   */
  private Vector<Cell> cells = new Vector<Cell>();
  
  /**
   * Creates a new instance of DataColumn
   * @param db The database this Column belongs to
   * @param type the type of cells
   */
  public DataColumn(Database db, int type)
    throws SystemErrorException
  {
    super(db);
    this.setType(type);
  } //End of DataColumn() constructor

  /**
   * Sets the type of cells in this column
   * @param type the type of cells
   */
  public void setType(int type)
  {
    this.type = type;

    // Notify listeners that the column definition has been modified
    for (int i=0; i<this.changeListeners.size(); i++) {
      ((ColumnChangeListener)this.changeListeners.elementAt(i)).ColumnDefChanged(this);
    }
} //End of setType() method
  
  /**
   * Adds a cell to the column
   * @param newCell the new cell to add
   * @param location where to add the cell
   */
  public void addCell(Cell newCell, int location)
  {
    this.cells.add(location, newCell);

    // Notify listeners that a cell has been added
    for (int i=0; i<this.changeListeners.size(); i++) {
      ((ColumnChangeListener)this.changeListeners.elementAt(i)).ColumnCellAdded(this, newCell);
    }
  } //End of addCell() method

  /**
   * Adds a cell to the end of the column
   * @param newCell the new cell to add
   */
  public void addCell(Cell newCell)
  {
    this.addCell(newCell, this.cells.size());
  } //End of addCell() method

  /**
   * Removes a cell from the column
   * @param oldCell the cell to remove from the column
   */
  public void removeCell(Cell oldCell)
  {
    this.cells.remove(oldCell);

    // Notify listeners that a cell has been removed
    for (int i=0; i<this.changeListeners.size(); i++) {
      ((ColumnChangeListener)this.changeListeners.elementAt(i)).ColumnCellRemoved(this, oldCell);
    }
  } //End of removeCell() method

  /**
   * Creates a new cell in the column.
   * @return the newly created cell
   */
  public Cell createCell()
  {
    return (null);
  } //End of createCell() method

  /**
   * Gets the cells in the column
   */
  public Cell[] getCells()
  {
    if (this.cells == null) {
      return (null);
    }

    if (this.cells.size() <= 0) {
      return (null);
    }

    Cell[] ca = new Cell[this.cells.size()];
    for (int i=0; i<ca.length; i++) {
      ca[i] = (Cell)this.cells.elementAt(i);
    }

    return (ca);
  } //End of getCells() method

} //End of DataColumn class definition
