/*
 * Database.java
 *
 * Created on December 12, 2006, 12:37 PM
 *
 */

package au.com.nicta.openshapa.db;

/**
 * Abstract database class
 * @author FGA
 */
public abstract class Database
{
  /** Constant type for Data Column Creation */
  public final static int COLUMN_TYPE_DATA = 1;
  /** Constant type for Reference Column Creation */
  public final static int COLUMN_TYPE_REFERENCE = 2;

  /** Default Ticks per second from MacSHAPA */
  public final static int DEFAULT_TPS = 60;

  /** Default start time */
  public final static long DEFAULT_START_TIME = 0;
  
  /** Start time flag */
  protected boolean useStartTime = false;

  /** Start time value */
  long startTime = DEFAULT_START_TIME;

  /** Ticks per second */
  int tps = DEFAULT_TPS;

  /** Database change listeners */
  java.util.Vector<DatabaseChangeListener> changeListeners = new java.util.Vector<DatabaseChangeListener>();

  /**
   * Gets the database type string<br>
   * (eg ODB File)
   */
  public abstract String getType();

  /**
   * Gets the database version number<br>
   * (eg 2.1)
   */
  public abstract float getVersion();

  /**
   * Gets the database type and version string<br>
   * (eg ODB File v2.1)
   */
  public String getDBVersionString()
  {
    StringBuffer sb = new StringBuffer();
    sb.append(this.getType());
    sb.append(" v");
    sb.append(this.getVersion());
    return (sb.toString());
  }
  
  /**
   * Adds a database change listener
   * @param listener the change listener to add
   */
  public void addChangeListener(DatabaseChangeListener listener)
  {
    this.changeListeners.add(listener);
  } //End of addChangeListener() method

  /**
   * Removes a database change listener
   * @param listener the change listener to remove
   */
  public void removeChangeListener(DatabaseChangeListener listener)
  {
    this.changeListeners.remove(listener);
  } //End of removeChangeListener() method
  
  /**
   * Sets the ticks per second
   * @param tps ticks per second
   */
  public void setTicks(int tps)
  {
    int prevTPS = this.tps;
    this.tps = tps;

    // Notify all listeners of TPS change
    for (int i=0; i<this.changeListeners.size(); i++) {
      ((DatabaseChangeListener)this.changeListeners.elementAt(i)).databaseTicksChanged(this, prevTPS);
    }
  } //End of setTicks() method

  /**
   * Gets the ticks per second
   * @return ticks per second
   */
  public int getTicks()
  {
    return (this.tps);
  } //End of getTicks() method

  /**
   * Sets the start time flag
   * @param useStartTime the use start time flag value
   */
  public void setUseStartTime(boolean useStartTime)
  {
    this.useStartTime = useStartTime; 
  } //End of setUseStartTime() method

  /**
   * Gets the use start time flag
   * @return true if we are to use a start time
   */
  public boolean useStartTime()
  {
    return (this.useStartTime);
  } //End of useStartTime() method

  /**
   * Sets the start time
   * @param startTime the start time
   */
  public void setStartTime(long startTime)
  {
    long prevST = this.startTime;
    this.startTime = startTime;

    // Notify all listeners of TPS change
    for (int i=0; i<this.changeListeners.size(); i++) {
      ((DatabaseChangeListener)this.changeListeners.elementAt(i)).databaseStartTimeChanged(this, prevST);
    }
  } // End of setStartTime() method

  /**
   * Gets the start time
   * @return the start time value
   */
  public long getStartTime()
  {
    return (this.startTime);
  } //End of getStartTime() method


  /**
   * Gets the cell associated with the given id in the given column
   * @param columnID the id of the column the cell is in
   * @param cellID the id of the cell
   * @return the cell associated with the given cell id
   */
  public abstract Cell getCell(long columnID, long cellID);

  /**
   * Gets the cell associated with the given id in the given column
   * @param column the column the cell is in
   * @param cellID the id of the cell
   * @return the cell associated with the given cell id
   */
  public Cell getCell(Column column, long cellID)
  {
    return (this.getCell(column.getID(), cellID));
  } //End of getCell() method

  
  /**
   * Gets the column associated with the given id
   * @param columnID the id of the column
   * @return the column associated with the given column id
   */
  public abstract Column getColumn(long columnID);

  /**
   * Gets the argument associated with the given id
   * @param argumentID the id of the argument
   * @return the argument associated with the given argument id
   */
  public abstract FormalArgument getArgument(long argumentID);

  /**
   * Gets the vocab associated with the given id
   * @param vocabID the id of the vocab
   * @return the vocab associated with the given vocab id
   */
  public abstract VocabElement getVocab(long vocabID);

  /**
   * Creates a Column of the given type in the database.
   * @param columnType the type of column to create:<br>
   * Must be either:
   * <UL>
   * <LI>COLUMN_TYPE_DATA</LI> or
   * <LI>COLUMN_TYPE_REFERENCE</LI>
   * </UL>
   * @return the newly created column object 
   */
  public abstract Column createColumn(int columnType);

  /**
   * Creates a new cell in the given column.
   * @param columnID the id of the column in which to create the cell
   * @return the newly created cell
   */
  public abstract Cell createCell(long columnID);

  /**
   * Creates a new cell in the given column.
   * @param column the column in which to create the cell
   * @return the newly created cell
   */
  public Cell createCell(Column column)
  {
    return (this.createCell(column.getID()));
  } // End of createCell() method

  /**
   * Creates a new formal argument.
   * @return the newly created formal argument
   */
  public abstract FormalArgument createFormalArgument();

  /**
   * Creates a new matrix vocab element.
   * @return the newly created matrix vocab element
   */
  public abstract VocabElement createMatrixVocabElement();

  /**
   * Creates a new predicate vocab element.
   * @return the newly created predicate vocab element
   */
  public abstract VocabElement createPredicateVocabElement();

} //End of Database class definition
