/*
 * Column.java
 *
 * Created on December 7, 2006, 5:13 PM
 *
 */

package au.com.nicta.openshapa.db;

import java.util.Vector;

/**
 *
 * @author FGA
 */
public abstract class Column extends DBElement
{
  /**
   * Hidden flag
   */
  protected boolean visible = true;

  /**
   * Read-only flag
   */
  protected boolean readOnly = false;

  /**
   * Column Change Listeners
   */
  protected Vector<ColumnChangeListener> changeListeners = new Vector<ColumnChangeListener>();

  /**
   * Creates a new instance of Column
   * @param db The database this Column belongs to
   * @param id The id value of this Column
   */
  public Column(Database db, long id)
  {
    super(db, id);
  } //End of Column constructor

  /**
   * Creates a new instance of Column
   * @param db The database this Column belongs to
   */
  public Column(Database db)
  {
    this(db, DEFAULT_ID);
  } //End of Column constructor
  
  /**
   * Adds a cell to the column
   * @param newCell the new cell to add
   * @param location where to add the cell
   */
  public abstract void addCell(Cell newCell, int location);

  /**
   * Adds a cell to the end of the column
   * @param newCell the new cell to add
   */
  public abstract void addCell(Cell newCell);

  /**
   * Creates a new cell in the column.
   * @return the newly created cell
   */
  public abstract Cell createCell();


  /**
   * Gets the cells in the column
   */
  public abstract Cell[] getCells();

  /**
   * Removes a cell from the column
   * @param oldCell the cell to remove from the column
   */
  public abstract void removeCell(Cell oldCell);
  
  /**
   * Sets the visibility flag
   * @param visible whether the column is visible
   */
  public void setVisible(boolean visible)
  {
    this.visible = visible;
  } //End of setVisible() method
  
  /**
   * Gets the visible flag
   * @return true if the column is visible
   */
  public boolean isVisible()
  {
    return (this.visible);
  } //End of isVisible() method

  /**
   * Set the read only flag for the column
   * @param readOnly Whether or not the column is read only
   */
  public void setReadOnly(boolean readOnly)
  {
    this.readOnly = readOnly;
  } //End of setReadOnly() method

  /**
   * Whether the column is read only or not
   * @return true if the Column is ready only
   */
  public boolean isReadOnly()
  {
    return (this.readOnly);
  } //End of isReadOnly() method

  /**
   * Adds a change listener to the column listener list
   * @param listener the listener to add
   */
  public void addColumnChangeListener(ColumnChangeListener listener)
  {
    this.changeListeners.add(listener);
  } //End of addColumnChangeListener() method

  /**
   * Removes a change listener from the column listener list
   */
  public void removeColumnChangeListener(ColumnChangeListener listener)
  {
    this.changeListeners.remove(listener);
  } //End of removeColumnChangeListener() method

} //End of Column class definition
