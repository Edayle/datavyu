/*
 * DataValue.java
 *
 * Created on December 6, 2006, 12:46 PM
 *
 */

package au.com.nicta.openshapa.db;

/**
 *
 * @author FGA
 */
public abstract class DataValue
{
    
    /*************************************************************************/
    /***************************** Fields: ***********************************/
    /*************************************************************************/
    
    /** Data Value Change Listeners */
    java.util.Vector<DataValueChangeListener> changeListeners = 
            new java.util.Vector<DataValueChangeListener>();
  
    /** The user to last modify the database */
    protected DBUser lastModUser = null;
    
    
    /*************************************************************************/
    /*************************** Constructors: *******************************/
    /*************************************************************************/
    
    /** 
     * DataValue()
     *
     * Constructor for instances of DataValue.  
     * 
     * Two versions of this constructor.  One that takes no parameters and just
     * calls the super() constructor, and one that is used to create a copies
     * of subclasses of DataValue.
     *
     *                                              JRM -- 2/28/07  
     *
     * Changes:
     *
     *    - None.
     *      
     */
 
    public DataValue()
    {
        super();
    }
    
    public DataValue(DataValue fArg)
        throws SystemErrorException
    {
        super();
        
        final String mName = "DataValue::DataValue(): ";
        
        if ( ! ( fArg instanceof DataValue ) )
        {
            throw new SystemErrorException(mName + 
                    "fArg not an instance of DataValue.");
        }
        
        this.setLastModUser(fArg.getLastModUser());
        
        /* Could do this with a call to clone(), but this way shuts up 
         * the compiler.
         */
        for ( int i = 0; i < fArg.changeListeners.size(); i++ )
        {
            this.addChangeListener(fArg.changeListeners.get(i));
        }
    } /* DataValue::DataValue() */
    
        
    /*************************************************************************/
    /******************* Abstract Method Declarations: ***********************/
    /*************************************************************************/
    
    /**
     * toString()
     *
     * Returns a String representation of the DBValue for display.
     * @return the string value.
     *
     * Changes:
     *
     *     - None.
     */
    
    public abstract String toString();


    /**
     * toDBString()
     *
     * Returns a database String representation of the DBValue for comparison against
     * the database's expected value.<br>
     * <i>This function is intended for debugging purposses.</i>
     * @return the string value.
     */
  
    public abstract String toDBString();
    
        
    /*************************************************************************/
    /***************************** Accessors: ********************************/
    /*************************************************************************/
    
    /**
     * getLastModUser()
     *
     * Returns the last user to modify the value
     *
     * @return the user
     *
     * Changes:
     *
     *    - None.
     *
     */
  
    public DBUser getLastModUser()
    {
        return (this.lastModUser);
        
    } /* DataValue::getLastModUser() */

    /**
     * setLastModUser()
     *
     * Sets the last user to modify the DBValue
     * @param lastModUser the user who last modified the DBValue
     *
     * Changes:
     *
     *    - None.
     */
  
    protected void setLastModUser(DBUser lastModUser)
    {
      this.lastModUser = lastModUser;
      
      return;
      
    } /* DataValue::setLastModUser() */
    
        
    /*************************************************************************/
    /****************** Change Listener List Management: *********************/
    /*************************************************************************/
    

    /**
     * addChangeListener()
     *
     * Add a change listener to this DataValue
     *
     * @param listener the change listener to add
     *
     * Changes:
     *
     *    - None.
     */
  
    public void addChangeListener(DataValueChangeListener listener)
    {
        this.changeListeners.add(listener);
        
        return;
        
    } /* DataValue::addChangeListener() */

    /**
     * removeChangeListener()
     *
     * Removes a change listener from this DataValue
     *
     * @param listener the change listener to remove
     *
     * Changes:
     *
     *    - None.
     */
  
    public void removeChangeListener(DataValueChangeListener listener)
    {
        this.changeListeners.remove(listener);
        
        return;
        
    } /* DataValue::removeChangeListener() */

    /**
     * notifyListeners()
     *
     * Notifies the listeners that this DataValue has changed
     *
     * Changes:
     *
     *    - None
     */
  
    protected void notifyListeners()
    {
        // Loop through vector calling listeners
        for (int i=0; i<this.changeListeners.size(); i++) 
        {
            ((DataValueChangeListener)this.changeListeners.elementAt(i)).dataValueChanged(this);
        }
        
        return;
        
    }  /* DataValue::notifyListeners() */

} //End of DataValue class definition
