/*
 * InternalFAChangeListener.java
 *
 * Created on February 4, 2008, 12:05 AM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package au.com.nicta.openshapa.db;

/**
 * Interface InternalFAChangeListener
 * 
 * Objects internal to the database that wish to be informed of changes in 
 * formal arguments (i.e. formal arguments defined for PredicateVocabElements 
 * and MatrixVocabElements) may implement this interface and then register 
 * with the formal arguments of interest.
 * 
 * The methods specified in this interface will be called when appropriate.
 * 
 *                                                  JRM -- 2/2/08
 *
 * @author mainzer
 */
public interface InternalFAChangeListener
{
    /**
     * FAChanged()
     *
     * Called if the formal argument of interest is changed.  Note that for
     * purposes of this interface, a change in the location of the formal 
     * argument is not a change, and this method will not be called in this
     * case.
     *
     * The db parameter is mainly for sanity checking, as it is unlikely that 
     * any listener will be interested in vocab element from more than one 
     * Database.
     *
     * The VEID parameter contains the ID assigned the vocab element that 
     * contains the formal argument.
     *
     * The FAID parameter contains the ID assigned to the target formal 
     * argument.
     *
     * The fargType parameter indicates the type of the parameter.
     *
     * The nameChanged parameter indicates whether the name of the formal 
     * argument changed.
     *
     * The subrangeChanged parameter indicates whether the subRange field of 
     * the target formal argument changed.
     *
     * The rangeChanged parameter indicates whether the range of allowable 
     * values for instantiations of the formal argument has changed.
     *
     * The oldFarg parameter contains a reference to a copy of the old version  
     * of the formal argument.
     *
     * The newFarg parameter contains a reference to a copy of the new version
     * of the formal argument.
     *
     * WARNING: For efficiency, the old and new farg parameter are passed by 
     *          reference.  Thus listeners MUST NOT alter these objects, or 
     *          retain references to them.
     *
     *                                          JRM -- 2/2/08
     *
     * Changes:
     *  
     *    - None.
     */
    
    void FAChanged(Database db,
                  long VEID,
                  long FAID,
                  FormalArgument.fArgType fargType,
                  boolean nameChanged,
                  boolean subRangeChanged,
                  boolean rangeChanged,
                  FormalArgument oldFarg,
                  FormalArgument newFarg);
 
    
    /**
     * FADeleted()
     *
     * Called if the FormalArgument has been deleted -- this will happen if
     * either the formal argument has been deleted from the VocabElement, or
     * if the VocabElement itself has been deleted.
     *
     * The db parameter is mainly for sanity checking, as it is unlikely that 
     * any listener will be interested in vocab element from more than one 
     * Database.
     *
     * The VEID parameter contains the ID assigned the vocab element that is
     * being deleted.  In some cases, it will be needed to disambiguate 
     * the call.
     *
     * The FAID parameter contains the ID assigned to the target formal 
     * argument.
     *
     * The fargType parameter indicates the type of the parameter.
     *
     * Note that the target vocab element will not actually be deleted until
     * all listeners have been notified.  
     *
     *                                          JRM -- 2/2/08
     *
     * Changes:
     *  
     *    - None.
     */
    
    void FADeleted(Database db,
                   long VEID,
                   long FAID,
                   FormalArgument.fArgType fargType);
}
