package au.com.nicta.openshapa.cont;

import java.awt.Frame;
import java.io.File;
import java.net.MalformedURLException;
import quicktime.QTException;
import quicktime.QTSession;
import quicktime.app.view.QTComponent;
import quicktime.std.StdQTConstants;
import quicktime.std.movies.Movie;
import quicktime.std.movies.MovieController;
import quicktime.std.movies.media.DataRef;

public class QTVideoViewer extends Frame
implements ContinuousDataViewer {

    //private ContinuousDataController vidController;

    private Movie m;
    private MovieController mc;
    private QTComponent qtc = null;

    public QTVideoViewer(/*final ContinuousDataController cont*/) {
        initComponents();
        //vidController = cont;
        try {
            QTSession.open();
        } catch (QTException e) {
            // TODO bug #18 Log the nature of the error to log4j.
        }        
    }
    
    public void setVideoFile(final File videoFile) {
        try {
            // create the DataRef that contains the information about where the movie is
            DataRef urlMovie = new DataRef(videoFile.toURI().toURL().toString());

            // create the movie
            m = Movie.fromDataRef(urlMovie, StdQTConstants.newMovieActive);

            // create the movie controller
            mc = new MovieController(m);

            // create and add a QTComponent if we haven't done so yet, otherwise set qtc's movie controller
            /*
            if (qtc == null) {
                qtc = QTFactory.makeQTComponent(mc);
                add((Component)qtc);
            } else {
                qtc.setMovieController(mc);
            }
             */

      // this will set the size of the enclosing frame to the size of the incoming movie
      //pack();

      // start up the movie
            m.setRate(1);
        } catch (QTException e) {
            // TODO bug #18 Log the nature of the error to log4j.
        } catch (MalformedURLException m) {
            // TODO bug #18 Log the nature of the error to log4j.
        }
    }

    public void createNewCell(){}
    public void jogBack(){}
    public void stop(){}
    public void jogForward(){}
    public void shuttleBack(){}
    public void pause(){}
    public void shuttleForward(){}
    public void rewind(){}
    public void play()
    {
        System.out.println("Got Play Command");
    }
    public void forward(){}
    public void setCellOffset(){}
    public void find(){}
    public void goBack(){}
    public void setNewCellOnset(){}
    public void syncCtrl(){}
    public void sync(){}
    public void setCellOnset(){}

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
