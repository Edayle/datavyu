/*
 * ExecutiveFrame.java
 *
 * Created on June 26, 2007, 2:52 PM
 */

package au.com.nicta.openshapa;

import au.com.nicta.openshapa.util.*;
import java.util.*;
import java.awt.event.*;
import javax.swing.*;



/**
 *
 * @author  fga
 */
public class ExecutiveFrame extends javax.swing.JFrame
    implements ActionListener
{
  protected Executive parent = null;
  protected Hashtable<JMenuItem, ConfigurationObject> userMenus =
      new Hashtable<JMenuItem, ConfigurationObject>();

  /** Creates new form ExecutiveFrame */
  public ExecutiveFrame(Executive parent)
  {
    this.parent = parent;
    initComponents();

    Configuration langConfig = this.parent.getLangConfiguration();
    this.fileMenu.setText(getMenu(langConfig, "File"));
    this.helpMenu.setText(getMenu(langConfig, "Help"));
    this.windowMenu.setText(getMenu(langConfig, "Windows"));
    this.aboutMenuItem.setText(getMenu(langConfig, "About"));
    this.quitMenuItem.setText(getMenu(langConfig, "Quit"));

    UIConfiguration uiconfig = this.parent.getUIConfiguration();

    this.aboutMenuItem.setFont(uiconfig.menuFont);
    this.fileMenu.setFont(uiconfig.menuFont);
    this.helpMenu.setFont(uiconfig.menuFont);
    this.mainMenuBar.setFont(uiconfig.menuFont);
    this.quitMenuItem.setFont(uiconfig.menuFont);
    this.windowMenu.setFont(uiconfig.menuFont);

    this.aboutMenuItem.setForeground(uiconfig.menuForegroundColor);
    this.fileMenu.setForeground(uiconfig.menuForegroundColor);
    this.helpMenu.setForeground(uiconfig.menuForegroundColor);
    this.mainMenuBar.setForeground(uiconfig.menuForegroundColor);
    this.quitMenuItem.setForeground(uiconfig.menuForegroundColor);
    this.windowMenu.setForeground(uiconfig.menuForegroundColor);

    this.aboutMenuItem.setBackground(uiconfig.menuBackgroundColor);
    this.fileMenu.setBackground(uiconfig.menuBackgroundColor);
    this.helpMenu.setBackground(uiconfig.menuBackgroundColor);
    this.mainMenuBar.setBackground(uiconfig.menuBackgroundColor);
    this.quitMenuItem.setBackground(uiconfig.menuBackgroundColor);
    this.windowMenu.setBackground(uiconfig.menuBackgroundColor);
  }
  
  public String getMenu(Configuration langConfig, String menu)
  {
    if (langConfig == null) {
      return (menu);
    }

    String m = menu.toLowerCase().replace(' ', '_');
    ConfigurationObject co=langConfig.getElements("OpenSHAPALang.menus."+m)[0];
    if (co != null) {
      return (co.getValue());
    }

    return (menu);
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    mainMenuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    quitMenuItem = new javax.swing.JMenuItem();
    windowMenu = new javax.swing.JMenu();
    helpMenu = new javax.swing.JMenu();
    aboutMenuItem = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    mainMenuBar.setBackground(java.awt.SystemColor.window);
    fileMenu.setBackground(java.awt.SystemColor.window);
    fileMenu.setText("File");
    quitMenuItem.setText("Quit");
    quitMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        quitMenuItemActionPerformed(evt);
      }
    });

    fileMenu.add(quitMenuItem);

    mainMenuBar.add(fileMenu);

    windowMenu.setBackground(java.awt.SystemColor.window);
    windowMenu.setText("Window");
    mainMenuBar.add(windowMenu);

    helpMenu.setBackground(java.awt.SystemColor.window);
    helpMenu.setText("Help");
    aboutMenuItem.setText("About");
    helpMenu.add(aboutMenuItem);

    mainMenuBar.add(helpMenu);

    setJMenuBar(mainMenuBar);

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(0, 482, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(0, 0, Short.MAX_VALUE)
    );
    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_quitMenuItemActionPerformed
  {//GEN-HEADEREND:event_quitMenuItemActionPerformed
    System.exit(0);
  }//GEN-LAST:event_quitMenuItemActionPerformed

  /**
   * @param args the command line arguments
   */
  /*
  public static void main(String args[])
  {
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new ExecutiveFrame(null).setVisible(true);
      }
    });
  }
   */

  /**
   * 
   * @param co 
   * @throws java.lang.ClassCastException 
   */
  public void addMenuItem(ConfigurationObject co)
    throws ClassCastException
  {
    if (Configuration.DISCRETE_MANAGER_PATH.equalsIgnoreCase(co.toString()) &&
        Configuration.DISCRETE_DISPLAY_PATH.equalsIgnoreCase(co.toString()) &&
        Configuration.CONTINUOUS_DISPLAY_PATH.equalsIgnoreCase(co.toString()) &&
        Configuration.PLUGIN_PATH.equalsIgnoreCase(co.toString())) {
      throw (new ClassCastException("Unknown Data Type: " + co.toString()));
    }

    String menu=null;
    String name=null;
    String submenu=null;
    String description="";
    ConfigurationObject tempObj;

    tempObj = co.getElement("menu");
    if (tempObj==null) {
      throw (new ClassCastException("Menu parameter not found [" + menu + "]"));
    }
    menu = tempObj.getValue();

    tempObj = co.getElement("name");
    if (tempObj==null) {
      throw (new ClassCastException("Name parameter not found [" + name + "]"));
    }
    name = tempObj.getValue();

    tempObj = co.getElement("description");
    if (tempObj!=null) {
      description=tempObj.getValue();
    }

    tempObj = co.getElement("submenu");
    if (tempObj!=null) {
      submenu = tempObj.getValue();
    }
    boolean issubmenu = false;
    if (submenu!=null) {
      if (submenu.equalsIgnoreCase("true")) {
        issubmenu = true;
      }
    }

    Configuration langConfig = this.parent.getLangConfiguration();

    JMenu jm = null;
    for (int i=0; i<this.mainMenuBar.getMenuCount(); i++) {
      if (this.mainMenuBar.getMenu(i).getText().equalsIgnoreCase(getMenu(langConfig, menu))) {
        jm = this.mainMenuBar.getMenu(i);
      }
    }

    if (jm == null) {
      jm = new JMenu(getMenu(langConfig, menu));
      this.mainMenuBar.add(jm);
      jm.setFont(this.parent.getUIConfiguration().menuFont);
      jm.setForeground(this.parent.getUIConfiguration().menuForegroundColor);
      jm.setBackground(this.parent.getUIConfiguration().menuBackgroundColor);
    }

    if (issubmenu) {
      JMenu jmm = new JMenu(getMenu(langConfig, name));
      jmm.setToolTipText(description);
      try {
        Object o = this.parent.getConfiguration().getElementInstance(co);
        if (o instanceof au.com.nicta.openshapa.disc.DiscreteDataManager) {
            ((au.com.nicta.openshapa.disc.DiscreteDataManager)o).setExecutive(this.parent);
        }
        if (o instanceof ExecutiveMenuItem) {
            ExecutiveMenuItem emi = (ExecutiveMenuItem)o;
            JMenuItem[] mia = emi.getSubMenus();
            if (mia != null) {
                for (int i=0; i<mia.length; i++) {
                    mia[i].setFont(this.parent.getUIConfiguration().menuFont);
                    mia[i].setForeground(this.parent.getUIConfiguration().menuForegroundColor);
                    mia[i].setBackground(this.parent.getUIConfiguration().menuBackgroundColor);
                    jmm.add(mia[i]);
                }
            }
        }
      } catch (Exception e) {
          e.printStackTrace();
          this.parent.dumpExceptionLog(e);
      }
      jm.add(jmm);
      jmm.setFont(this.parent.getUIConfiguration().menuFont);
      jmm.setForeground(this.parent.getUIConfiguration().menuForegroundColor);
      jmm.setBackground(this.parent.getUIConfiguration().menuBackgroundColor);
      this.userMenus.put(jmm, co);
    } else {
      JMenuItem jmi = new JMenuItem(getMenu(langConfig, name));
      jmi.setToolTipText(description);
      jm.add(jmi);
      jmi.addActionListener(this);
      jmi.setFont(this.parent.getUIConfiguration().menuFont);
      jmi.setForeground(this.parent.getUIConfiguration().menuForegroundColor);
      jmi.setBackground(this.parent.getUIConfiguration().menuBackgroundColor);
      this.userMenus.put(jmi, co);
    }
    this.validate();
    this.repaint();

  }

  /**
   * 
   * @param evt 
   */
  public void actionPerformed(ActionEvent evt)
  {
    JMenuItem jmi = (JMenuItem)evt.getSource();
    ConfigurationObject co = (ConfigurationObject)this.userMenus.get(jmi);
    if (this.parent != null) {
      this.parent.menuClicked(co);
    }
  }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem aboutMenuItem;
  private javax.swing.JMenu fileMenu;
  private javax.swing.JMenu helpMenu;
  private javax.swing.JMenuBar mainMenuBar;
  private javax.swing.JMenuItem quitMenuItem;
  private javax.swing.JMenu windowMenu;
  // End of variables declaration//GEN-END:variables
  
}
