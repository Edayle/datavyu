/*
 * Use the converter from Controller > Convert Videos
 */
package org.datavyu.views;

import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.stage.Stage;
import org.apache.commons.io.FilenameUtils;
import org.datavyu.util.VideoConverter;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

public class VideoConverterV extends javax.swing.JFrame {
    private File sourceVideo;
    private File targetVideo;
    private VideoConverter vc;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton convertButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton sourceFileButton;
    private javax.swing.JTextPane sourceText;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton targetFileButton;
    private javax.swing.JTextPane targetText;
    private javax.swing.JButton handbrakeMessage;

    public VideoConverterV() {
        initComponents();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VideoConverterV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VideoConverterV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VideoConverterV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VideoConverterV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

		/* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VideoConverterV().setVisible(true);
            }
        });
    }

    public void setSourceVideo(File source) {
        sourceVideo = source;
        sourceText.setText(sourceVideo.getAbsolutePath());
        checkIfReady();
    }

    public void setTargetVideo(File target) {
        targetVideo = target;
        targetText.setText(targetVideo.getAbsolutePath());
        checkIfReady();
    }

    private void checkIfReady() {
        if (!sourceText.getText().isEmpty() && !targetText.getText().isEmpty()) {
            convertButton.setEnabled(true);
        } else {
            convertButton.setEnabled(false);
        }
    }

    public void startConversion() {
        // TODO: ???
    }

    /**
     * This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        convertButton = new javax.swing.JButton();
        targetFileButton = new javax.swing.JButton();
        sourceFileButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        targetText = new javax.swing.JTextPane();
        progressBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        sourceText = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        handbrakeMessage = new javax.swing.JButton();


        class OpenUrlAction implements ActionListener {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    URI uri = null;
                    try {
                        uri = new URI("https://handbrake.fr/");
                    } catch (URISyntaxException ue) {
                        ue.printStackTrace();
                    }
                    Desktop.getDesktop().browse(uri);
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            }
        }

        handbrakeMessage.setText("<html>NOTE: We highly recommend using the Handbrake tool for video conversion.<br>This tool can be obtained from <a href=\"https://handbrake.fr/</html>\">https://handbrake.fr/</a>");
        handbrakeMessage.addActionListener(new OpenUrlAction());

        setTitle("Convert Videos");
        setMinimumSize(new java.awt.Dimension(571, 192));
        setName("Convert Videos");

        convertButton.setText("Convert Video");
        convertButton.setEnabled(false);
        convertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertButtonActionPerformed(evt);
            }
        });

        targetFileButton.setText("Select Target");
        targetFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetFileButtonActionPerformed(evt);
            }
        });

        sourceFileButton.setText("Select Source");
        sourceFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceFileButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        targetText.setEnabled(false);
        jScrollPane2.setViewportView(targetText);

        progressBar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                progressBarStateChanged(evt);
            }
        });

        sourceText.setEnabled(false);
        jScrollPane1.setViewportView(sourceText);

        jLabel1.setText("Source Video");

        jLabel2.setText("Target Video");

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        statusLabel.setText(" ");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(layout.createSequentialGroup()
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                                .add(jLabel1)
                                                                .add(jLabel2)
                                                )
                                                .add(28, 28, 28)
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                        .add(jScrollPane1)
                                                        .add(jScrollPane2))
                                                .add(18, 18, 18)
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                        .add(sourceFileButton)
                                                        .add(targetFileButton)))
                                        .add(progressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(handbrakeMessage, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                                .add(statusLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 297, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 100, Short.MAX_VALUE)
                                                .add(convertButton)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(cancelButton)
                                                .add(23, 23, 23)
                                                .add(closeButton)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(layout.createSequentialGroup()
                                .add(48, 48, 48)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                        .add(jLabel1)
                                        )
                                        .add(sourceFileButton))
                                .add(13, 13, 13)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(targetFileButton)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                                .add(jLabel2)
                                                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(layout.createSequentialGroup()
                                                .add(12, 12, 12)
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                                                .add(convertButton)
                                                                .add(cancelButton)
                                                                .add(closeButton)
                                                ))
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(statusLabel)))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(handbrakeMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)


                                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        )
        );

        add(handbrakeMessage);
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void convertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertButtonActionPerformed

        new JFXPanel();
        vc = new VideoConverter();
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                vc.start(new Stage());
            }
        });

        vc.ConvertVideo(sourceVideo, targetVideo, progressBar);
        convertButton.setEnabled(false);

    }//GEN-LAST:event_convertButtonActionPerformed

    private void sourceFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceFileButtonActionPerformed
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();

        //In response to a button click:
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            setSourceVideo(fc.getSelectedFile());

            // Create an example target video name
            String targetName = fc.getSelectedFile().getAbsolutePath();
            targetName = FilenameUtils.removeExtension(targetName);
            targetName += ".datavyu.mp4";

            setTargetVideo(new File(targetName));
        }
    }//GEN-LAST:event_sourceFileButtonActionPerformed

    private void targetFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetFileButtonActionPerformed
        final JFileChooser fc = new JFileChooser();

        //In response to a button click:
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            setTargetVideo(fc.getSelectedFile());
        }
    }//GEN-LAST:event_targetFileButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        if (vc != null) {
            vc.StopConversion();
        }

        //this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        if (vc != null) {
            vc.StopConversion();
        }

        this.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void progressBarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_progressBarStateChanged
        int v = progressBar.getValue();
        if (v == progressBar.getMaximum()) {
            cancelButton.setEnabled(false);
            statusLabel.setText("Conversion complete!");

        } else if (v == progressBar.getMinimum()) {
            cancelButton.setEnabled(false);
            statusLabel.setText(" ");
        } else {
            cancelButton.setEnabled(true);
            statusLabel.setText("In progress...");
        }
    }//GEN-LAST:event_progressBarStateChanged
    // End of variables declaration//GEN-END:variables
}
