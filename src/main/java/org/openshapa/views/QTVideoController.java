package org.openshapa.views;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TimeZone;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import org.apache.log4j.Logger;
import org.jdesktop.application.Action;
import org.openshapa.db.TimeStamp;
import org.openshapa.OpenSHAPA;
import org.openshapa.util.FloatUtils;
import org.openshapa.views.continuous.DataViewer;
import org.openshapa.views.continuous.PluginManager;

/**
 * Quicktime video controller.
 */
public final class QTVideoController extends OpenSHAPADialog {

    //--------------------------------------------------------------------------
    //
    //

    /** One second in milliseconds. */
    private static final long ONE_SECOND = 1000L;


    /** Rate of playback for rewinding. */
    private static final float REWIND_RATE = -32F;

    /** Rate of normal playback. */
    private static final float PLAY_RATE = 1F;

    /** Rate of playback for fast forwarding. */
    private static final float FFORWARD_RATE = 32F;

    /** Sequence of allowable shuttle rates. */
    private static final float[] SHUTTLE_RATES;

    // Initialize SHUTTLE_RATES
    // values: [ (2^-5), ..., (2^0), ..., (2^5) ]
    static {
        int POWER = 5;
        SHUTTLE_RATES = new float[2 * POWER + 1];
        float value = 1;
        SHUTTLE_RATES[POWER] = value;
        for (int i = 1; i <= POWER; ++i) {
            value *= 2;
            SHUTTLE_RATES[POWER + i] = value;
            SHUTTLE_RATES[POWER - i] = 1F / value;
        }
    }

    /**
     * Enumeration of shuttle directions.
     */
    enum ShuttleDirection {
        BACKWARDS(-1),
        UNDEFINED(0),
        FORWARDS(1);

        private int parameter;

        ShuttleDirection(final int p) { this.parameter = p; }

        public int getParameter() { return parameter; }
    }

    //--------------------------------------------------------------------------
    //
    //

    /** Stores the lowest frame rate for all available viewers. */
    private float currentFPS = Float.MAX_VALUE;

    /** Shuttle status flag. */
    private ShuttleDirection shuttleDirection = ShuttleDirection.UNDEFINED;

    /** Index of current shuttle rate. */
    private int shuttleRate;

    /** Paused status flag. */
    private boolean isPaused;


    //--------------------------------------------------------------------------
    // [initialization]
    //

    /**
     * Constructor. Creates a new QTVideoController.
     *
     * @param parent The parent of this form.
     * @param modal Should the dialog be modal or not?
     */
    public QTVideoController(final java.awt.Frame parent, final boolean modal) {
        super(parent, modal);

        initComponents();
        setName(this.getClass().getSimpleName());
        viewers = new HashSet<DataViewer>();

        // Hide unsupported features.
        this.syncVideoButton.setEnabled(false);
        this.syncButton.setEnabled(false);
        this.syncCtrlButton.setEnabled(false);
        this.timestampSetupButton.setEnabled(false);
    }

    //--------------------------------------------------------------------------
    //
    //

    /**
     * Set time location for data streams.
     *
     * @param milliseconds The millisecond time.
     *
     * @todo currently only sets the time stamp label of the controller. The
     *       controller needs to run its own clock that should call this method
     */
    public void setCurrentLocation(final long milliseconds) {
        try {
            SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss:SSS");
            Date originDate = format.parse("00:00:00:000");
            Date currentTime = new Date(originDate.getTime() + milliseconds);

            this.timestampLabel.setText(format.format(currentTime));
        } catch (ParseException e) {
            logger.error("Unable to set current location", e);
        }
    }

    /**
     *
     * @return The time stamp of the current location.
     */
    public TimeStamp getCurrentLocation() {
        return (this.currentTimestamp);
    }

    /**
     * Get the current master clock time for the controller.
     *
     * @return Time in milliseconds.
     */
    private long getCurrentTime() {
        return getCurrentLocation().getTime();
    }

    /**
     * Remove the specifed viewer form the controller.
     *
     * @param viewer The viewer to shutdown.
     * @return True if the controller contained this viewer.
     */
    public boolean shutdown(final DataViewer viewer) {
        return viewers.remove(viewer);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        topPanel = new javax.swing.JPanel();
        timestampLabel = new javax.swing.JLabel();
        openVideoButton = new javax.swing.JButton();
        lblSpeed = new javax.swing.JLabel();
        gridButtonPanel = new javax.swing.JPanel();
        syncCtrlButton = new javax.swing.JButton();
        syncButton = new javax.swing.JButton();
        setCellOnsetButton = new javax.swing.JButton();
        setCellOffsetButton = new javax.swing.JButton();
        rewindButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        forwardButton = new javax.swing.JButton();
        goBackButton = new javax.swing.JButton();
        shuttleBackButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        shuttleForwardButton = new javax.swing.JButton();
        findButton = new javax.swing.JButton();
        jogBackButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        jogForwardButton = new javax.swing.JButton();
        rightTimePanel = new javax.swing.JPanel();
        syncVideoButton = new javax.swing.JButton();
        goBackTextField = new javax.swing.JTextField();
        findTextField = new javax.swing.JTextField();
        bottomPanel = new javax.swing.JPanel();
        leftButtonPanel = new javax.swing.JPanel();
        createNewCellButton = new javax.swing.JButton();
        setNewCellOnsetButton = new javax.swing.JButton();
        fillerPanel = new javax.swing.JPanel();
        timestampSetupButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quicktime Video Controller");
        setName(""); // NOI18N

        mainPanel.setBackground(java.awt.Color.white);
        mainPanel.setLayout(new java.awt.BorderLayout(2, 0));

        topPanel.setBackground(java.awt.Color.white);
        topPanel.setLayout(new java.awt.BorderLayout());

        timestampLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timestampLabel.setText("00:00:00:000");
        timestampLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        topPanel.add(timestampLabel, java.awt.BorderLayout.CENTER);

        openVideoButton.setBackground(java.awt.Color.white);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.openshapa.OpenSHAPA.class).getContext().getResourceMap(QTVideoController.class);
        openVideoButton.setText(resourceMap.getString("openVideoButton.text")); // NOI18N
        openVideoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openVideoButtonActionPerformed(evt);
            }
        });
        topPanel.add(openVideoButton, java.awt.BorderLayout.LINE_START);

        lblSpeed.setText("0");
        lblSpeed.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 2));
        topPanel.add(lblSpeed, java.awt.BorderLayout.LINE_END);

        mainPanel.add(topPanel, java.awt.BorderLayout.NORTH);

        gridButtonPanel.setBackground(java.awt.Color.white);
        gridButtonPanel.setLayout(new java.awt.GridLayout(4, 4));

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(org.openshapa.OpenSHAPA.class).getContext().getActionMap(QTVideoController.class, this);
        syncCtrlButton.setAction(actionMap.get("syncCtrlAction")); // NOI18N
        syncCtrlButton.setMaximumSize(new java.awt.Dimension(32, 32));
        syncCtrlButton.setMinimumSize(new java.awt.Dimension(32, 32));
        syncCtrlButton.setPreferredSize(new java.awt.Dimension(32, 32));
        gridButtonPanel.add(syncCtrlButton);

        syncButton.setAction(actionMap.get("syncAction")); // NOI18N
        gridButtonPanel.add(syncButton);

        setCellOnsetButton.setAction(actionMap.get("setCellOnsetAction")); // NOI18N
        setCellOnsetButton.setIcon(resourceMap.getIcon("setCellOnsetButton.icon")); // NOI18N
        gridButtonPanel.add(setCellOnsetButton);

        setCellOffsetButton.setAction(actionMap.get("setCellOffsetAction")); // NOI18N
        setCellOffsetButton.setIcon(resourceMap.getIcon("setCellOffsetButton.icon")); // NOI18N
        gridButtonPanel.add(setCellOffsetButton);

        rewindButton.setAction(actionMap.get("rewindAction")); // NOI18N
        rewindButton.setIcon(resourceMap.getIcon("rewindButton.icon")); // NOI18N
        gridButtonPanel.add(rewindButton);

        playButton.setAction(actionMap.get("playAction")); // NOI18N
        playButton.setIcon(resourceMap.getIcon("playButton.icon")); // NOI18N
        gridButtonPanel.add(playButton);

        forwardButton.setAction(actionMap.get("forwardAction")); // NOI18N
        forwardButton.setIcon(resourceMap.getIcon("forwardButton.icon")); // NOI18N
        gridButtonPanel.add(forwardButton);

        goBackButton.setAction(actionMap.get("goBackAction")); // NOI18N
        goBackButton.setIcon(resourceMap.getIcon("goBackButton.icon")); // NOI18N
        gridButtonPanel.add(goBackButton);

        shuttleBackButton.setAction(actionMap.get("shuttleBackAction")); // NOI18N
        shuttleBackButton.setIcon(resourceMap.getIcon("shuttleBackButton.icon")); // NOI18N
        gridButtonPanel.add(shuttleBackButton);

        pauseButton.setAction(actionMap.get("pauseAction")); // NOI18N
        pauseButton.setIcon(resourceMap.getIcon("pauseButton.icon")); // NOI18N
        gridButtonPanel.add(pauseButton);

        shuttleForwardButton.setAction(actionMap.get("shuttleForwardAction")); // NOI18N
        shuttleForwardButton.setIcon(resourceMap.getIcon("shuttleForwardButton.icon")); // NOI18N
        gridButtonPanel.add(shuttleForwardButton);

        findButton.setAction(actionMap.get("findAction")); // NOI18N
        findButton.setIcon(resourceMap.getIcon("findButton.icon")); // NOI18N
        gridButtonPanel.add(findButton);

        jogBackButton.setAction(actionMap.get("jogBackAction")); // NOI18N
        jogBackButton.setIcon(resourceMap.getIcon("jogBackButton.icon")); // NOI18N
        gridButtonPanel.add(jogBackButton);

        stopButton.setAction(actionMap.get("stopAction")); // NOI18N
        stopButton.setIcon(resourceMap.getIcon("stopButton.icon")); // NOI18N
        gridButtonPanel.add(stopButton);

        jogForwardButton.setAction(actionMap.get("jogForwardAction")); // NOI18N
        jogForwardButton.setIcon(resourceMap.getIcon("jogForwardButton.icon")); // NOI18N
        gridButtonPanel.add(jogForwardButton);

        mainPanel.add(gridButtonPanel, java.awt.BorderLayout.CENTER);

        rightTimePanel.setBackground(java.awt.Color.white);
        rightTimePanel.setLayout(new java.awt.GridLayout(4, 1));
        rightTimePanel.add(syncVideoButton);

        goBackTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        goBackTextField.setText("00:00:00:000");
        rightTimePanel.add(goBackTextField);

        findTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        findTextField.setText("00:00:00:000");
        rightTimePanel.add(findTextField);

        mainPanel.add(rightTimePanel, java.awt.BorderLayout.EAST);

        bottomPanel.setBackground(java.awt.Color.white);
        bottomPanel.setLayout(new java.awt.BorderLayout());

        leftButtonPanel.setBackground(java.awt.Color.white);
        leftButtonPanel.setLayout(new java.awt.GridBagLayout());

        createNewCellButton.setAction(actionMap.get("createNewCellAction")); // NOI18N
        createNewCellButton.setIcon(resourceMap.getIcon("createNewCellButton.icon")); // NOI18N
        leftButtonPanel.add(createNewCellButton, new java.awt.GridBagConstraints());

        setNewCellOnsetButton.setAction(actionMap.get("setNewCellStopTime")); // NOI18N
        setNewCellOnsetButton.setIcon(resourceMap.getIcon("setNewCellOnsetButton.icon")); // NOI18N
        leftButtonPanel.add(setNewCellOnsetButton, new java.awt.GridBagConstraints());

        bottomPanel.add(leftButtonPanel, java.awt.BorderLayout.WEST);

        fillerPanel.setBackground(java.awt.Color.white);
        fillerPanel.setLayout(new java.awt.BorderLayout());
        fillerPanel.add(timestampSetupButton, java.awt.BorderLayout.CENTER);

        bottomPanel.add(fillerPanel, java.awt.BorderLayout.EAST);

        mainPanel.add(bottomPanel, java.awt.BorderLayout.SOUTH);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Action to invoke when the user clicks on the open button.
     *
     * @param evt The event that triggered this action.
     */
    private void openVideoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openVideoButtonActionPerformed
        JFileChooser jd = new JFileChooser();

        // Add file filters for each of the supported plugins.
        List<FileFilter> filters = PluginManager.getInstance()
                                                .getPluginFileFilters();
        for (FileFilter f : filters) {
            jd.addChoosableFileFilter(f);
        }
        int result = jd.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File f = jd.getSelectedFile();

            // Build the data viewer for the file.
            DataViewer viewer = PluginManager.getInstance()
                                             .buildViewerFromFile(f);
            if (viewer == null) {
                logger.error("No DataViewer available.");
                return;
            }

            viewer.setDataFeed(f);
            OpenSHAPA.getApplication().show(viewer.getParentJFrame());

            // adjust the overall frame rate.
            float fps = viewer.getFrameRate();
            if (fps < currentFPS) { currentFPS = fps; }

            // Add the QTDataViewer to the list of viewers we are controlling.
            this.viewers.add(viewer);
        }
    }//GEN-LAST:event_openVideoButtonActionPerformed

    /**
     * Action to invoke when the user clicks on the sync ctrl button.
     */
    @Action
    public void syncCtrlAction() {
        for (int i = 0; i < this.viewers.size(); i++) {
            //this.viewers.elementAt(i).syncCtrl();
        }
    }

    /**
     * Action to invoke when the user clicks on the sync button.
     */
    @Action
    public void syncAction() {
        for (DataViewer viewer : viewers) { viewer.seekTo(getCurrentTime()); }
    }


    /**
     * Action to invoke when the user clicks the set cell onset button.
     */
    @Action
    public void setCellOnsetAction() {
        // curTime needs to be in milliseconds and pulled from a timer
        // mechanisim.
        //new SetCellOnsetC((long) curTime);
    }

    /**
     * Action to invoke when the user clicks on the set cell offest button.
     */
    @Action
    public void setCellOffsetAction() {
        // curTime needs to be in milliseconds and pulled from a timer
        // mechanisim.
        //new SetCellOffsetC((long) curTime);
    }


    //--------------------------------------------------------------------------
    // Playback actions
    //

    /**
     * Action to invoke when the user clicks on the play button.
     */
    @Action
    public void playAction() { playAt(PLAY_RATE); }

    /**
     * Action to invoke when the user clicks on the fast foward button.
     */
    @Action
    public void forwardAction() { playAt(FFORWARD_RATE); }

    /**
     * Action to invoke when the user clicks on the rewind button.
     */
    @Action
    public void rewindAction() { playAt(REWIND_RATE); }

    /**
     * Action to invoke when the user clicks on the pause button.
     *
     * @todo pauses current playback but does not reset playback rate?
     */
    @Action
    public void pauseAction() {
        if (isPaused) { for (DataViewer viewer : viewers) { viewer.play(); } }
        else          { for (DataViewer viewer : viewers) { viewer.stop(); } }
        isPaused = !isPaused;
    }

    /**
     * Action to invoke when the user clicks on the stop button.
     *
     * @todo Stops current playback and resets rate?
     */
    @Action
    public void stopAction() {
        lblSpeed.setText(FloatUtils.doubleToFractionStr(new Double(PLAY_RATE)));
        for (DataViewer viewer : viewers) {
            viewer.stop();
            viewer.setPlaybackSpeed(PLAY_RATE);
        }
        shuttleDirection = ShuttleDirection.UNDEFINED;
        isPaused = true;
    }

    /**
     * Action to invoke when the user clicks on the shuttle forward button.
     *
     * @todo proper behaviour for reversing shuttle direction?
     */
    @Action
    public void shuttleForwardAction() { shuttle(ShuttleDirection.FORWARDS); }

    /**
     * Action to inovke when the user clicks on the shuttle back button.
     */
    @Action
    public void shuttleBackAction() { shuttle(ShuttleDirection.BACKWARDS); }

    /**
     * Populates the find time in the controller.
     *
     * @param milliseconds The time to use when populating the find field.
     */
    public void setFindTime(final long milliseconds) {
        // Populate the findTextField with the milliseconds.
        SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss:SSS");
        format.setTimeZone(TimeZone.getTimeZone("GMT -1"));
        this.findTextField.setText(format.format(new Date(milliseconds)));
    }

    /**
     * Action to invoke when the user clicks on the find button.
     */
    @Action
    public void findAction() {
        try {
            SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss:SSS");
            Date videoDate = format.parse(this.findTextField.getText());
            Date originDate = format.parse("00:00:00:000");

            // Determine the time in milliseconds.
            long milli = videoDate.getTime() - originDate.getTime();

            for (DataViewer viewer : viewers) {
                viewer.seekTo(milli);
            }

        } catch (ParseException e) {
            logger.error("unable to find within video", e);
        }
    }

    /**
     * Action to invoke when the user clicks on the go back button.
     */
    @Action
    public void goBackAction() {
        try {
            SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss:SSS");
            Date videoDate = format.parse(this.goBackTextField.getText());
            Date originDate = format.parse("00:00:00:000");

            // Determine the time in milliseconds.
            long milli = videoDate.getTime() - originDate.getTime();

            for (DataViewer viewer : viewers) {
                viewer.seek(milli);
                // viewer.play();
            }

        } catch (ParseException e) {
            logger.error("unable to find within video", e);
        }
    }


    /**
     * Action to invoke when the user clicks on the jog backwards button.
     */
    @Action
    public void jogBackAction() { jump((long) (-ONE_SECOND / currentFPS)); }

    /**
     * Action to invoke when the user clicks on the jog forwards button.
     */
    @Action
    public void jogForwardAction() { jump((long) (ONE_SECOND / currentFPS)); }


    //--------------------------------------------------------------------------
    // [private] play back action helper functions
    //

    /**
     *
     * @param rate Rate of play.
     */
    private void playAt(final float rate) {
        shuttleDirection = ShuttleDirection.UNDEFINED;
        shuttleAt(rate);
    }

    /**
     *
     * @param direction The required direction of the shuttle.
     */
    private void shuttle(final ShuttleDirection direction) {
        if (direction == shuttleDirection) {
            ++shuttleRate;
            if (SHUTTLE_RATES.length == shuttleRate) { --shuttleRate; }

        } else {
            if (ShuttleDirection.UNDEFINED == shuttleDirection) {
                shuttleRate = -1;
            } else if (direction != shuttleDirection) {
                --shuttleRate;
            }

            if (0 > shuttleRate) {
                shuttleDirection = direction;
                shuttleRate = 0;
            }
        }

        shuttleAt(
                shuttleDirection.getParameter()
                * SHUTTLE_RATES[shuttleRate]
            );
    }

    /**
     *
     * @param rate Rate of shuttle.
     */
    private void shuttleAt(final float rate) {
        isPaused = false;
        lblSpeed.setText(FloatUtils.doubleToFractionStr(new Double(rate)));
        for (DataViewer viewer : viewers) {
            viewer.setPlaybackSpeed(rate);
            viewer.play();
        }
    }

    /**
     *
     * @param step Milliseconds to jump.
     */
    private void jump(final long step) {
        lblSpeed.setText(FloatUtils.doubleToFractionStr(new Double(PLAY_RATE)));
        for (DataViewer viewer : viewers) {
            viewer.stop();
            viewer.setPlaybackSpeed(PLAY_RATE);
            viewer.seek(step);
        }
    }


    //--------------------------------------------------------------------------
    //
    //

    /**
     * Action to invoke when the user clicks on the new cell button.
     */
    @Action
    public void createNewCellAction() {
        // curTime needs to be in milliseconds and pulled from a timer
        // mechanisim.
        // new CreateNewCellC(final long milliseconds);
    }

    /**
     * Action to invoke when the user clicks on the new cell onset button.
     */
    @Action
    public void setNewCellStopTime() {
        // curTime needs to be in milliseconds and pulled from a timer
        // mechanisim.
        // SetNewCellStopTimeC(final long milliseconds);
    }

    /**
     * Action to invoke when the user clicks on the sync video button.
     */
    @Action
    public void syncVideoAction() {
    }

    /**
     * Action to invoke when the user clicks on the time stamp setup button.
     *
     * @param evt The event that triggered this action.
     */
    /**
     * Action to invoke when the video progress bar state changes.
     *
     * @param evt The event that triggered this action.
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JButton createNewCellButton;
    private javax.swing.JPanel fillerPanel;
    private javax.swing.JButton findButton;
    private javax.swing.JTextField findTextField;
    private javax.swing.JButton forwardButton;
    private javax.swing.JButton goBackButton;
    private javax.swing.JTextField goBackTextField;
    private javax.swing.JPanel gridButtonPanel;
    private javax.swing.JButton jogBackButton;
    private javax.swing.JButton jogForwardButton;
    private javax.swing.JLabel lblSpeed;
    private javax.swing.JPanel leftButtonPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton openVideoButton;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton playButton;
    private javax.swing.JButton rewindButton;
    private javax.swing.JPanel rightTimePanel;
    private javax.swing.JButton setCellOffsetButton;
    private javax.swing.JButton setCellOnsetButton;
    private javax.swing.JButton setNewCellOnsetButton;
    private javax.swing.JButton shuttleBackButton;
    private javax.swing.JButton shuttleForwardButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton syncButton;
    private javax.swing.JButton syncCtrlButton;
    private javax.swing.JButton syncVideoButton;
    private javax.swing.JLabel timestampLabel;
    private javax.swing.JButton timestampSetupButton;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables

    /** Logger for this class. */
    private static Logger logger = Logger.getLogger(QTVideoController.class);

    /** The current time stamp on the quicktime video controller. */
    private TimeStamp currentTimestamp = null;

    /** The list of viewers associated with this controller. */
    private Set<DataViewer> viewers;
}
