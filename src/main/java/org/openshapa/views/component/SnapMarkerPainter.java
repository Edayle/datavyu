package org.openshapa.views.component;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.geom.GeneralPath;

import javax.swing.JComponent;

import org.openshapa.models.component.MixerModel;
import org.openshapa.models.component.SnapMarkerModel;
import org.openshapa.models.component.ViewportState;


/**
 * This class paints a timing needle.
 */
public final class SnapMarkerPainter extends JComponent {

    /**
     * Auto generated by Eclipse
     */
    private static final long serialVersionUID = -6157748998316240030L;

    private static final Color SNAP_MARKER_COLOR = new Color(169, 149, 202);
    private static final float SNAP_MARKER_WIDTH = 2.5f;
    
    private SnapMarkerModel snapMarkerModel;

    private MixerModel mixer;

    public SnapMarkerPainter() {
        super();
    }

    public SnapMarkerModel getSnapMarkerModel() {
        return snapMarkerModel;
    }

    public void setSnapMarkerModel(final SnapMarkerModel snapMarkerModel) {
        this.snapMarkerModel = snapMarkerModel;
        repaint();
    }

    public void setMixerView(final MixerModel mixer) {
        this.mixer = mixer;
        repaint();
    }

    @Override public final boolean contains(final Point p) {
        return contains(p.x, p.y);
    }

    @Override public final boolean contains(final int x, final int y) {
    	return false;
    }
    
    @Override public void paintComponent(final Graphics g) {
        if ((snapMarkerModel == null) || (mixer == null)) {
            return;
        }

        final Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
            RenderingHints.VALUE_ANTIALIAS_ON);
        
        final ViewportState viewport = mixer.getViewportModel().getViewport();
        final long markerTime = snapMarkerModel.getMarkerTime();

        if (!viewport.isTimeInViewport(markerTime)) {
            return;
        }

        final double markerX = viewport.computePixelXOffset(markerTime);

        GeneralPath snapMarker = new GeneralPath();
        snapMarker.moveTo(markerX, 0);
        snapMarker.lineTo(markerX, getHeight());
        
        g2d.setColor(SNAP_MARKER_COLOR);
        g2d.setStroke(new BasicStroke(SNAP_MARKER_WIDTH));
        g2d.draw(snapMarker);
    }
}
