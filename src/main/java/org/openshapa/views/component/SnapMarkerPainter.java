package org.openshapa.views.component;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;

import javax.swing.JComponent;

import org.openshapa.models.component.SnapMarkerModel;
import org.openshapa.models.component.ViewableModel;

/**
 * This class paints a timing needle.
 */
public class SnapMarkerPainter extends JComponent {

    /**
     * Auto generated by Eclipse
     */
    private static final long serialVersionUID = -6157748998316240030L;

    private static final Color SNAP_MARKER_COLOR = new Color(169, 149, 202);

    private SnapMarkerModel snapMarkerModel;
    private ViewableModel viewableModel;

    public SnapMarkerPainter() {
        super();
    }

    public SnapMarkerModel getSnapMarkerModel() {
        return snapMarkerModel;
    }

    public void setSnapMarkerModel(final SnapMarkerModel snapMarkerModel) {
        this.snapMarkerModel = snapMarkerModel;
        this.repaint();
    }

    public ViewableModel getViewableModel() {
        return viewableModel;
    }

    public void setViewableModel(final ViewableModel viewableModel) {
        this.viewableModel = viewableModel;
        this.repaint();
    }

    @Override
    public void paint(final Graphics g) {
        if (snapMarkerModel == null || viewableModel == null) {
            return;
        }

        final long markerTime = snapMarkerModel.getMarkerTime();
        // Don't paint if the needle is out of the current window
        if ((markerTime < viewableModel.getZoomWindowStart())
                || (viewableModel.getZoomWindowEnd() < markerTime)) {
            return;
        }

        Dimension size = this.getSize();

        g.setColor(SNAP_MARKER_COLOR);

        // Calculate the needle position based on the selected time
        float ratio =
                viewableModel.getIntervalWidth()
                        / viewableModel.getIntervalTime();
        int pos =
                (int) (markerTime * ratio - viewableModel.getZoomWindowStart()
                        * ratio)
                        + snapMarkerModel.getPaddingLeft();

        final int paddingTop = snapMarkerModel.getPaddingTop();

        // Draw the snap marker needle
        int x1 = pos;
        int y1 = paddingTop + 39;
        int x2 = pos + 1;
        int y2 = size.height;

        g.drawLine(x1, y1, x1, y2);
        g.drawLine(x2, y1, x2, y2);

    }

}
