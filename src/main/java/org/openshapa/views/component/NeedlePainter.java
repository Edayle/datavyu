package org.openshapa.views.component;

import java.awt.BasicStroke;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.geom.GeneralPath;

import javax.swing.JComponent;

import org.openshapa.models.component.MixerView;
import org.openshapa.models.component.NeedleConstants;
import org.openshapa.models.component.NeedleModel;
import org.openshapa.models.component.Viewport;


/**
 * This class paints a timing needle.
 */
public final class NeedlePainter extends JComponent {

    /**
     * Auto generated by Eclipse
     */
    private static final long serialVersionUID = -6157748998316240030L;

    /** Polygon region for the needle marker */
    private GeneralPath needleMarker;

    private NeedleModel needleModel;
    private MixerView mixer;

    public NeedlePainter() {
        super();
    }

    public NeedleModel getNeedleModel() {
        return needleModel.copy();
    }

    public void setNeedleModel(final NeedleModel needleModel) {
        this.needleModel = needleModel;
        this.repaint();
    }

    public void setMixerView(final MixerView mixer) {
        this.mixer = mixer;
        repaint();
    }

    @Override public boolean contains(final Point p) {
        return (needleMarker != null) && needleMarker.contains(p);
    }

    @Override public boolean contains(final int x, final int y) {
        return (needleMarker != null) && needleMarker.contains(x, y);
    }

    @Override public void paintComponent(final Graphics g) {

        if ((needleModel == null) || (mixer == null)) {
            return;
        }

        Viewport viewport = mixer.getViewport();

        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
            RenderingHints.VALUE_ANTIALIAS_ON);

        assert (NeedleConstants.NEEDLE_HEAD_WIDTH > 0)
            && (NeedleConstants.NEEDLE_HEAD_HEIGHT > 0);

        final double needleHeadWidth = NeedleConstants.NEEDLE_HEAD_WIDTH;
        final double needleHeadHeight = NeedleConstants.NEEDLE_HEAD_HEIGHT;

        final double zoomWindowIndicatorTopY = getSize().height - needleModel.getZoomIndicatorHeight();
        final double transitionAreaTopY = zoomWindowIndicatorTopY - needleModel.getTimescaleTransitionHeight();
        
        final long currentTime = needleModel.getCurrentTime();
        double needlePositionX = viewport.computePixelXOffset(currentTime) + Math.ceil(needleHeadWidth);
        final boolean isNeedleInViewport = viewport.isTimeInViewport(currentTime);
        
        if (isNeedleInViewport) {
        	// draw the triangular needle head
	        needleMarker = new GeneralPath();
	        needleMarker.moveTo((float) (needlePositionX - needleHeadWidth), 0); // top-left
	        needleMarker.lineTo((float) (needlePositionX + needleHeadWidth), 0); // top-right
	        needleMarker.lineTo((float) needlePositionX, (float) needleHeadHeight); // bottom
	        needleMarker.closePath();
	
	        g2d.setColor(needleModel.getNeedleColor());
	        g2d.fill(needleMarker);
	
	        g2d.setColor(needleModel.getNeedleColor().darker());
	        g2d.draw(needleMarker);
	
	        // Draw the timing needle
	        float x1 = (float) needlePositionX;
	        float y1 = (float) needleHeadHeight;
	        float x2 = (float) needlePositionX;
	        float y2 = (float) transitionAreaTopY;
	
	        GeneralPath line = new GeneralPath();
	        line.moveTo(x1, y1);
	        line.lineTo(x2, y2);
	
	        assert NeedleConstants.NEEDLE_WIDTH > 0;
	        g2d.setStroke(new BasicStroke((float) NeedleConstants.NEEDLE_WIDTH));
	        g2d.draw(line);
        }

        g2d.setColor(needleModel.getNeedleColor().darker());

        // paint the needle transition area
        final double zoomWindowIndicatorX = ((double) currentTime * viewport.getViewWidth() / viewport.getMaxEnd()) + Math.ceil(NeedleConstants.NEEDLE_HEAD_WIDTH);
        
        final int transitionCurveBottomWeight = 10;
        assert transitionCurveBottomWeight >= 0;

        GeneralPath shape = new GeneralPath();
        shape.moveTo(needlePositionX, transitionAreaTopY);
        shape.curveTo(needlePositionX,
            (transitionAreaTopY
                + (zoomWindowIndicatorTopY * transitionCurveBottomWeight))
            / (transitionCurveBottomWeight + 1), zoomWindowIndicatorX,
            transitionAreaTopY, zoomWindowIndicatorX, zoomWindowIndicatorTopY);
        final float strokeWidth = (float) NeedleConstants.NEEDLE_WIDTH / (isNeedleInViewport ? 2.0f : 5.0f);
        g2d.setStroke(new BasicStroke(strokeWidth));
        g2d.draw(shape);
        
        // paint the needle in the zoom window indicator

        GeneralPath needleMarker = new GeneralPath();
        needleMarker.moveTo(zoomWindowIndicatorX, zoomWindowIndicatorTopY);
        needleMarker.lineTo(zoomWindowIndicatorX, getSize().height);
        
        g2d.setStroke(new BasicStroke((float) NeedleConstants.NEEDLE_WIDTH));
        g2d.draw(needleMarker);        
    }
}
