package org.openshapa.views.component;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Polygon;

import javax.swing.JComponent;

import org.openshapa.models.component.NeedleModel;
import org.openshapa.models.component.ViewableModel;

/**
 * This class paints a timing needle.
 */
public class NeedlePainter extends JComponent {

    /**
     * Auto generated by Eclipse
     */
    private static final long serialVersionUID = -6157748998316240030L;

    /** Polygon region for the needle marker */
    private Polygon needleMarker;

    private NeedleModel needleModel;
    private ViewableModel viewableModel;

    public NeedlePainter() {
        super();
    }

    public NeedleModel getNeedleModel() {
        return needleModel.clone();
    }

    public void setNeedleModel(final NeedleModel needleModel) {
        this.needleModel = needleModel;
        this.repaint();
    }

    public ViewableModel getViewableModel() {
        return viewableModel.clone();
    }

    public void setViewableModel(final ViewableModel viewableModel) {
        this.viewableModel = viewableModel;
        this.repaint();
    }

    @Override
    public boolean contains(final Point p) {
        return needleMarker.contains(p);
    }

    @Override
    public boolean contains(final int x, final int y) {
        return needleMarker.contains(x, y);
    }

    @Override
    public void paint(final Graphics g) {
        if (needleModel == null || viewableModel == null) {
            return;
        }

        final long currentTime = needleModel.getCurrentTime();
        // Don't paint if the needle if it is out of the current window
        if ((currentTime < viewableModel.getZoomWindowStart())
                || (viewableModel.getZoomWindowEnd() < currentTime)) {
            return;
        }

        Dimension size = this.getSize();

        g.setColor(new Color(250, 0, 0, 100));

        // Calculate the needle position based on the selected time
        float ratio =
                viewableModel.getIntervalWidth()
                        / viewableModel.getIntervalTime();
        int pos =
                Math.round(currentTime * ratio
                        - viewableModel.getZoomWindowStart() * ratio)
                        + needleModel.getPaddingLeft();

        final int paddingTop = needleModel.getPaddingTop();
        needleMarker = new Polygon();
        needleMarker.addPoint(pos - 10, paddingTop);
        needleMarker.addPoint(pos + 11, paddingTop);
        needleMarker.addPoint(pos + 1, 19);
        needleMarker.addPoint(pos, 19);

        g.fillPolygon(needleMarker);

        g.setColor(Color.red);
        g.drawPolygon(needleMarker);

        // Draw the timing needle
        int x1 = pos;
        int y1 = paddingTop + 19;
        int x2 = pos + 1;
        int y2 = size.height;

        g.drawLine(x1, y1, x1, y2);
        g.drawLine(x2, y1, x2, y2);

    }

}
